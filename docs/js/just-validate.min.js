"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _ = Object.defineProperty;
var w = Object.getOwnPropertySymbols;
var X = Object.prototype.hasOwnProperty,
    Z = Object.prototype.propertyIsEnumerable;

var E = function E(p, b, g) {
  return b in p ? _(p, b, {
    enumerable: !0,
    configurable: !0,
    writable: !0,
    value: g
  }) : p[b] = g;
},
    L = function L(p, b) {
  for (var g in b || (b = {})) {
    X.call(b, g) && E(p, g, b[g]);
  }

  if (w) {
    var _iterator = _createForOfIteratorHelper(w(b)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var g = _step.value;
        Z.call(b, g) && E(p, g, b[g]);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return p;
};

var u = function u(p, b, g) {
  return E(p, _typeof(b) != "symbol" ? b + "" : b, g), g;
};

(function (p, b) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) == "object" && typeof module != "undefined" ? module.exports = b() : typeof define == "function" && define.amd ? define(b) : (p = typeof globalThis != "undefined" ? globalThis : p || self, p.JustValidate = b());
})(void 0, function () {
  "use strict";

  var p = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
      b = /^[0-9]+$/,
      g = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/,
      x = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/,
      I = function I(n) {
    var e = n;
    return typeof n == "string" && (e = n.trim()), !e;
  },
      T = function T(n) {
    return p.test(n);
  },
      $ = function $(n, e) {
    return n.length > e;
  },
      M = function M(n, e) {
    return n.length < e;
  },
      V = function V(n) {
    return b.test(n);
  },
      P = function P(n) {
    return g.test(n);
  },
      j = function j(n) {
    return x.test(n);
  },
      G = function G(n, e) {
    return n > e;
  },
      A = function A(n, e) {
    return n < e;
  };

  var d;

  (function (n) {
    n.Required = "required", n.Email = "email", n.MinLength = "minLength", n.MaxLength = "maxLength", n.Password = "password", n.Number = "number", n.MaxNumber = "maxNumber", n.MinNumber = "minNumber", n.StrongPassword = "strongPassword", n.CustomRegexp = "customRegexp", n.MinFilesCount = "minFilesCount", n.MaxFilesCount = "maxFilesCount", n.Files = "files";
  })(d || (d = {}));

  var y;

  (function (n) {
    n.Required = "required";
  })(y || (y = {}));

  var k;

  (function (n) {
    n.Label = "label", n.LabelArrow = "labelArrow";
  })(k || (k = {}));

  var N = function N(n, e) {
    switch (n) {
      case d.Required:
        return "The field is required";

      case d.Email:
        return "Email has invalid format";

      case d.MaxLength:
        return "The field must contain a maximum of :value characters".replace(":value", String(e));

      case d.MinLength:
        return "The field must contain a minimum of :value characters".replace(":value", String(e));

      case d.Password:
        return "Password must contain minimum eight characters, at least one letter and one number";

      case d.Number:
        return "Value should be a number";

      case d.StrongPassword:
        return "Password should contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character";

      case d.MaxNumber:
        return "Number should be less or equal than :value".replace(":value", String(e));

      case d.MinNumber:
        return "Number should be more or equal than :value".replace(":value", String(e));

      case d.MinFilesCount:
        return "Files count should be more or equal than :value".replace(":value", String(e));

      case d.MaxFilesCount:
        return "Files count should be less or equal than :value".replace(":value", String(e));

      case d.Files:
        return "Uploaded files have one or several invalid properties (extension/size/type etc)";

      default:
        return "Value is incorrect";
    }
  },
      q = function q(n) {
    switch (n) {
      case y.Required:
        return "The field is required";

      default:
        return "Group is incorrect";
    }
  },
      F = function F(n) {
    return !!n && typeof n.then == "function";
  },
      z = ".just-validate-error-label[data-tooltip=true]{position:fixed;padding:4px 8px;background:#423f3f;color:#fff;white-space:nowrap;z-index:10;border-radius:4px;transform:translateY(-5px)}.just-validate-error-label[data-tooltip=true]:before{content:'';width:0;height:0;border-left:solid 5px transparent;border-right:solid 5px transparent;border-bottom:solid 5px #423f3f;position:absolute;z-index:3;display:block;bottom:-5px;transform:rotate(180deg);left:calc(50% - 5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]{transform:translateX(-5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]:before{right:-7px;bottom:auto;left:auto;top:calc(50% - 2px);transform:rotate(90deg)}.just-validate-error-label[data-tooltip=true][data-direction=right]{transform:translateX(5px)}.just-validate-error-label[data-tooltip=true][data-direction=right]:before{right:auto;bottom:auto;left:-7px;top:calc(50% - 2px);transform:rotate(-90deg)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]{transform:translateY(5px)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]:before{right:auto;bottom:auto;left:calc(50% - 5px);top:-5px;transform:rotate(0)}",
      C = 5,
      S = {
    errorFieldStyle: {
      color: "#b81111",
      border: "1px solid #B81111"
    },
    errorFieldCssClass: "just-validate-error-field",
    successFieldCssClass: "just-validate-success-field",
    errorLabelStyle: {
      color: "#b81111"
    },
    errorLabelCssClass: "just-validate-error-label",
    successLabelCssClass: "just-validate-success-label",
    focusInvalidField: !0,
    lockForm: !0,
    testingMode: !1
  };

  var O = /*#__PURE__*/function () {
    function O(e, t, s) {
      var _this = this;

      _classCallCheck(this, O);

      u(this, "form", null);
      u(this, "fields", {});
      u(this, "groupFields", {});
      u(this, "errors", {});
      u(this, "isValid", !1);
      u(this, "isSubmitted", !1);
      u(this, "globalConfig", S);
      u(this, "errorLabels", []);
      u(this, "successLabels", []);
      u(this, "eventListeners", []);
      u(this, "dictLocale", []);
      u(this, "currentLocale");
      u(this, "customStyleTags", {});
      u(this, "onSuccessCallback");
      u(this, "onFailCallback");
      u(this, "tooltips", []);
      u(this, "lastScrollPosition");
      u(this, "isScrollTick");
      u(this, "refreshAllTooltips", function () {
        _this.tooltips.forEach(function (e) {
          e.refresh();
        });
      });
      u(this, "handleDocumentScroll", function () {
        _this.lastScrollPosition = window.scrollY, _this.isScrollTick || (window.requestAnimationFrame(function () {
          _this.refreshAllTooltips(), _this.isScrollTick = !1;
        }), _this.isScrollTick = !0);
      });
      u(this, "formSubmitHandler", function (e) {
        e.preventDefault(), _this.isSubmitted = !0, _this.globalConfig.lockForm && _this.lockForm(), _this.validate().finally(function () {
          var t, s;
          _this.globalConfig.lockForm && _this.unlockForm(), _this.isValid ? (t = _this.onSuccessCallback) == null || t.call(_this, e) : (s = _this.onFailCallback) == null || s.call(_this, _this.fields);
        });
      });
      u(this, "handleFieldChange", function (e) {
        var t, s;

        for (var i in _this.fields) {
          var r = _this.fields[i];

          if (r.elem === e) {
            t = r, s = i;
            break;
          }
        }

        !t || !s || _this.validateField(s, t, !0);
      });
      u(this, "handleGroupChange", function (e) {
        var t, s;

        for (var i in _this.groupFields) {
          var r = _this.groupFields[i];

          if (r.elems.find(function (a) {
            return a === e;
          })) {
            t = r, s = i;
            break;
          }
        }

        !t || !s || _this.validateGroup(s, t);
      });
      u(this, "handlerChange", function (e) {
        !e.target || (_this.handleFieldChange(e.target), _this.handleGroupChange(e.target), _this.renderErrors());
      });
      this.initialize(e, t, s);
    }

    _createClass(O, [{
      key: "initialize",
      value: function initialize(e, t, s) {
        if (this.form = null, this.errors = {}, this.isValid = !1, this.isSubmitted = !1, this.globalConfig = S, this.errorLabels = [], this.eventListeners = [], this.customStyleTags = {}, this.tooltips = [], typeof e == "string") {
          var i = document.querySelector(e);
          if (!i) throw Error("Form with ".concat(e, " selector not found! Please check the form selector"));
          this.setForm(i);
        } else if (e instanceof HTMLFormElement) this.setForm(e);else throw Error("Form selector is not valid. Please specify a string selector or a DOM element.");

        if (this.globalConfig = L(L({}, S), t), s && (this.dictLocale = s), this.isTooltip()) {
          var _i = document.createElement("style");

          _i.textContent = z, this.customStyleTags[k.Label] = document.head.appendChild(_i), this.addListener("scroll", document, this.handleDocumentScroll);
        }
      }
    }, {
      key: "getLocalisedString",
      value: function getLocalisedString(e) {
        var s;
        return !this.currentLocale || !this.dictLocale.length ? e : ((s = this.dictLocale.find(function (i) {
          return i.key === e;
        })) == null ? void 0 : s.dict[this.currentLocale]) || e;
      }
    }, {
      key: "getFieldErrorMessage",
      value: function getFieldErrorMessage(e, t) {
        var s = typeof e.errorMessage == "function" ? e.errorMessage(this.getElemValue(t), this.fields) : e.errorMessage;
        return this.getLocalisedString(s) || N(e.rule, e.value);
      }
    }, {
      key: "getFieldSuccessMessage",
      value: function getFieldSuccessMessage(e, t) {
        var s = typeof e == "function" ? e(this.getElemValue(t), this.fields) : e;
        return this.getLocalisedString(s);
      }
    }, {
      key: "getGroupErrorMessage",
      value: function getGroupErrorMessage(e) {
        return this.getLocalisedString(e.errorMessage) || q(e.rule);
      }
    }, {
      key: "getGroupSuccessMessage",
      value: function getGroupSuccessMessage(e) {
        return this.getLocalisedString(e.successMessage);
      }
    }, {
      key: "setFieldInvalid",
      value: function setFieldInvalid(e, t) {
        this.fields[e].isValid = !1, this.fields[e].errorMessage = this.getFieldErrorMessage(t, this.fields[e].elem);
      }
    }, {
      key: "setFieldValid",
      value: function setFieldValid(e, t) {
        this.fields[e].isValid = !0, t !== void 0 && (this.fields[e].successMessage = this.getFieldSuccessMessage(t, this.fields[e].elem));
      }
    }, {
      key: "setGroupInvalid",
      value: function setGroupInvalid(e, t) {
        this.groupFields[e].isValid = !1, this.groupFields[e].errorMessage = this.getGroupErrorMessage(t);
      }
    }, {
      key: "setGroupValid",
      value: function setGroupValid(e, t) {
        this.groupFields[e].isValid = !0, this.groupFields[e].successMessage = this.getGroupSuccessMessage(t);
      }
    }, {
      key: "getElemValue",
      value: function getElemValue(e) {
        switch (e.type) {
          case "checkbox":
            return e.checked;

          case "file":
            return e.files;

          default:
            return e.value;
        }
      }
    }, {
      key: "validateGroupRule",
      value: function validateGroupRule(e, t, s, i) {
        switch (i.rule) {
          case y.Required:
            (t === "radio" || t === "checkbox") && (s.every(function (r) {
              return !r.checked;
            }) ? this.setGroupInvalid(e, i) : this.setGroupValid(e, i));
        }
      }
    }, {
      key: "validateFieldRule",
      value: function validateFieldRule(e, t, s) {
        var _this2 = this;

        var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
        var r = s.value,
            a = this.getElemValue(t);

        if (s.plugin) {
          s.plugin(a, this.fields) || this.setFieldInvalid(e, s);
          return;
        }

        switch (s.rule) {
          case d.Required:
            {
              I(a) && this.setFieldInvalid(e, s);
              break;
            }

          case d.Email:
            {
              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              T(a) || this.setFieldInvalid(e, s);
              break;
            }

          case d.MaxLength:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof r != "number") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] should be a number. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;
              $(a, r) && this.setFieldInvalid(e, s);
              break;
            }

          case d.MinLength:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof r != "number") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] should be a number. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;
              M(a, r) && this.setFieldInvalid(e, s);
              break;
            }

          case d.Password:
            {
              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;
              P(a) || this.setFieldInvalid(e, s);
              break;
            }

          case d.StrongPassword:
            {
              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;
              j(a) || this.setFieldInvalid(e, s);
              break;
            }

          case d.Number:
            {
              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;
              V(a) || this.setFieldInvalid(e, s);
              break;
            }

          case d.MaxNumber:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof r != "number") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;
              var l = +a;
              (Number.isNaN(l) || G(l, r)) && this.setFieldInvalid(e, s);
              break;
            }

          case d.MinNumber:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof r != "number") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof a != "string") {
                this.setFieldInvalid(e, s);
                break;
              }

              if (a === "") break;

              var _l = +a;

              (Number.isNaN(_l) || A(_l, r)) && this.setFieldInvalid(e, s);
              break;
            }

          case d.CustomRegexp:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. This field will be always invalid.")), this.setFieldInvalid(e, s);
                return;
              }

              var _l2;

              try {
                _l2 = new RegExp(r);
              } catch (_unused) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] should be a valid regexp. This field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              var o = String(a);
              o !== "" && !_l2.test(o) && this.setFieldInvalid(e, s);
              break;
            }

          case d.MinFilesCount:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. This field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof r != "number") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (Number.isFinite(a == null ? void 0 : a.length) && a.length < r) {
                this.setFieldInvalid(e, s);
                break;
              }

              break;
            }

          case d.MaxFilesCount:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. This field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (typeof r != "number") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(e, s);
                break;
              }

              if (Number.isFinite(a == null ? void 0 : a.length) && a.length > r) {
                this.setFieldInvalid(e, s);
                break;
              }

              break;
            }

          case d.Files:
            {
              if (r === void 0) {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field is not defined. This field will be always invalid.")), this.setFieldInvalid(e, s);
                return;
              }

              if (_typeof(r) != "object") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field should be an object. This field will be always invalid.")), this.setFieldInvalid(e, s);
                return;
              }

              var _l3 = r.files;

              if (_typeof(_l3) != "object") {
                console.error("Value for ".concat(s.rule, " rule for [").concat(e, "] field should be an object with files array. This field will be always invalid.")), this.setFieldInvalid(e, s);
                return;
              }

              var _o = function _o(c, h) {
                var f = Number.isFinite(h.minSize) && c.size < h.minSize,
                    m = Number.isFinite(h.maxSize) && c.size > h.maxSize,
                    v = Array.isArray(h.names) && !h.names.includes(c.name),
                    D = Array.isArray(h.extensions) && !h.extensions.includes(c.name.split(".")[c.name.split(".").length - 1]),
                    H = Array.isArray(h.types) && !h.types.includes(c.type);
                return f || m || v || D || H;
              };

              if (_typeof(a) == "object" && a !== null) for (var c = 0, h = a.length; c < h; ++c) {
                var f = a.item(c);

                if (!f) {
                  this.setFieldInvalid(e, s);
                  break;
                }

                if (_o(f, _l3)) {
                  this.setFieldInvalid(e, s);
                  break;
                }
              }
              break;
            }

          default:
            {
              if (typeof s.validator != "function") {
                console.error("Validator for custom rule for [".concat(e, "] field should be a function. This field will be always invalid.")), this.setFieldInvalid(e, s);
                return;
              }

              var _l4 = s.validator(a, this.fields);

              if (typeof _l4 != "boolean" && typeof _l4 != "function" && console.error("Validator return value for [".concat(e, "] field should be boolean or function. It will be cast to boolean.")), typeof _l4 == "function") if (i) this.fields[e].asyncCheckPending = !0;else {
                this.fields[e].asyncCheckPending = !1;

                var _o2 = _l4();

                if (!F(_o2)) {
                  console.error("Validator function for custom rule for [".concat(e, "] field should return a Promise. This field will be always invalid.")), this.setFieldInvalid(e, s);
                  return;
                }

                return _o2.then(function (c) {
                  c || _this2.setFieldInvalid(e, s);
                }).catch(function () {
                  _this2.setFieldInvalid(e, s);
                });
              }
              _l4 || this.setFieldInvalid(e, s);
            }
        }
      }
    }, {
      key: "validateField",
      value: function validateField(e, t) {
        var _this3 = this;

        var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
        var r;
        t.isValid = !0;
        var i = [];
        return _toConsumableArray(t.rules).reverse().forEach(function (a) {
          var l = _this3.validateFieldRule(e, t.elem, a, s);

          F(l) && i.push(l);
        }), t.isValid && this.setFieldValid(e, (r = t.config) == null ? void 0 : r.successMessage), Promise.allSettled(i);
      }
    }, {
      key: "validateGroup",
      value: function validateGroup(e, t) {
        var _this4 = this;

        var s = [];
        return _toConsumableArray(t.rules).reverse().forEach(function (i) {
          var r = _this4.validateGroupRule(e, t.type, t.elems, i);

          F(r) && s.push(r);
        }), Promise.allSettled(s);
      }
    }, {
      key: "focusInvalidField",
      value: function focusInvalidField() {
        var _this5 = this;

        var _loop = function _loop(e) {
          var t = _this5.fields[e];

          if (!t.isValid) {
            setTimeout(function () {
              return t.elem.focus();
            }, 0);
            return "break";
          }
        };

        for (var e in this.fields) {
          var _ret = _loop(e);

          if (_ret === "break") break;
        }
      }
    }, {
      key: "afterSubmitValidation",
      value: function afterSubmitValidation() {
        this.renderErrors(), this.globalConfig.focusInvalidField && this.focusInvalidField();
      }
    }, {
      key: "validate",
      value: function validate() {
        var _this6 = this;

        return new Promise(function (e) {
          var t = [];
          Object.keys(_this6.fields).forEach(function (s) {
            var i = _this6.fields[s],
                r = _this6.validateField(s, i);

            F(r) && t.push(r);
          }), Object.keys(_this6.groupFields).forEach(function (s) {
            var i = _this6.groupFields[s],
                r = _this6.validateGroup(s, i);

            F(r) && t.push(r);
          }), t.length ? Promise.allSettled(t).then(function () {
            _this6.afterSubmitValidation(), e(!0);
          }) : (_this6.afterSubmitValidation(), e(!1));
        });
      }
    }, {
      key: "setForm",
      value: function setForm(e) {
        this.form = e, this.form.setAttribute("novalidate", "novalidate"), this.removeListener("submit", this.form, this.formSubmitHandler), this.addListener("submit", this.form, this.formSubmitHandler);
      }
    }, {
      key: "addListener",
      value: function addListener(e, t, s) {
        t.addEventListener(e, s), this.eventListeners.push({
          type: e,
          elem: t,
          func: s
        });
      }
    }, {
      key: "removeListener",
      value: function removeListener(e, t, s) {
        t.removeEventListener(e, s), this.eventListeners = this.eventListeners.filter(function (i) {
          return i.type !== e || i.elem !== t;
        });
      }
    }, {
      key: "addField",
      value: function addField(e, t, s) {
        if (typeof e != "string") throw Error("Field selector is not valid. Please specify a string selector.");
        var i = document.querySelector(e);
        if (!i) throw Error("Field with ".concat(e, " selector not found! Please check the field selector."));
        if (!Array.isArray(t) || !t.length) throw Error("Rules argument for the field [".concat(e, "] should be an array and should contain at least 1 element."));
        return t.forEach(function (r) {
          if (!("rule" in r || "validator" in r || "plugin" in r)) throw Error("Rules argument for the field [".concat(e, "] must contain at least one rule or validator property."));
          if (!r.validator && !r.plugin && (!r.rule || !Object.values(d).includes(r.rule))) throw Error("Rule should be one of these types: ".concat(Object.values(d).join(", "), ". Provided value: ").concat(r.rule));
        }), this.fields[e] = {
          elem: i,
          rules: t,
          isValid: void 0,
          config: s
        }, this.setListeners(i), this.isSubmitted && this.validate(), this;
      }
    }, {
      key: "removeField",
      value: function removeField(e) {
        if (typeof e != "string") throw Error("Field selector is not valid. Please specify a string selector.");
        if (!this.fields[e]) return console.error("Field not found. Check the field selector."), this;
        var t = this.getListenerType(this.fields[e].elem.type);
        return this.removeListener(t, this.fields[e].elem, this.handlerChange), this.clearErrors(), delete this.fields[e], this;
      }
    }, {
      key: "removeGroup",
      value: function removeGroup(e) {
        var _this7 = this;

        if (typeof e != "string") throw Error("Group selector is not valid. Please specify a string selector.");
        return this.groupFields[e] ? (this.groupFields[e].elems.forEach(function (t) {
          var s = _this7.getListenerType(t.type);

          _this7.removeListener(s, t, _this7.handlerChange);
        }), this.clearErrors(), delete this.groupFields[e], this) : (console.error("Group not found. Check the group selector."), this);
      }
    }, {
      key: "addRequiredGroup",
      value: function addRequiredGroup(e, t, s, i) {
        var _this8 = this;

        if (typeof e != "string") throw Error("Group selector is not valid. Please specify a string selector.");
        var r = document.querySelector(e);
        if (!r) throw Error("Group with ".concat(e, " selector not found! Please check the group selector."));
        var a = r.querySelectorAll("input"),
            l = Array.from(a).every(function (c) {
          return c.type === "radio";
        }),
            o = Array.from(a).every(function (c) {
          return c.type === "checkbox";
        });
        if (!l && !o) throw Error("Group should contain either or checkboxes or radio buttons");
        return this.groupFields[e] = {
          rules: [{
            rule: y.Required,
            errorMessage: t,
            successMessage: i
          }],
          groupElem: r,
          elems: Array.from(a),
          type: l ? "radio" : "checkbox",
          isDirty: !1,
          isValid: void 0,
          config: s
        }, a.forEach(function (c) {
          _this8.setListeners(c);
        }), this;
      }
    }, {
      key: "getListenerType",
      value: function getListenerType(e) {
        switch (e) {
          case "checkbox":
          case "select-one":
          case "file":
          case "radio":
            return "change";

          case "date":
            return "input";

          default:
            return "keyup";
        }
      }
    }, {
      key: "setListeners",
      value: function setListeners(e) {
        var t = this.getListenerType(e.type);
        this.removeListener(t, e, this.handlerChange), this.addListener(t, e, this.handlerChange);
      }
    }, {
      key: "clearErrors",
      value: function clearErrors() {
        var _this9 = this;

        var e, t, s, i, r, a;
        this.errorLabels.forEach(function (l) {
          return l.remove();
        }), this.successLabels.forEach(function (l) {
          return l.remove();
        });

        var _loop2 = function _loop2(l) {
          var o = _this9.fields[l],
              c = ((e = o.config) == null ? void 0 : e.errorFieldStyle) || _this9.globalConfig.errorFieldStyle;
          Object.keys(c).forEach(function (f) {
            o.elem.style[f] = "";
          });
          var h = ((t = o.config) == null ? void 0 : t.successFieldStyle) || _this9.globalConfig.successFieldStyle || {};
          Object.keys(h).forEach(function (f) {
            o.elem.style[f] = "";
          }), o.elem.classList.remove(((s = o.config) == null ? void 0 : s.errorFieldCssClass) || _this9.globalConfig.errorFieldCssClass, ((i = o.config) == null ? void 0 : i.successFieldCssClass) || _this9.globalConfig.successFieldCssClass);
        };

        for (var l in this.fields) {
          _loop2(l);
        }

        var _loop3 = function _loop3(_l5) {
          var o = _this9.groupFields[_l5],
              c = ((r = o.config) == null ? void 0 : r.errorFieldStyle) || _this9.globalConfig.errorFieldStyle;
          Object.keys(c).forEach(function (f) {
            o.elems.forEach(function (m) {
              var v;
              m.style[f] = "", m.classList.remove(((v = o.config) == null ? void 0 : v.errorFieldCssClass) || _this9.globalConfig.errorFieldCssClass);
            });
          });
          var h = ((a = o.config) == null ? void 0 : a.successFieldStyle) || _this9.globalConfig.successFieldStyle || {};
          Object.keys(h).forEach(function (f) {
            o.elems.forEach(function (m) {
              var v;
              m.style[f] = "", m.classList.remove(((v = o.config) == null ? void 0 : v.successFieldCssClass) || _this9.globalConfig.successFieldCssClass);
            });
          });
        };

        for (var _l5 in this.groupFields) {
          _loop3(_l5);
        }

        this.tooltips = [];
      }
    }, {
      key: "isTooltip",
      value: function isTooltip() {
        return !!this.globalConfig.tooltip;
      }
    }, {
      key: "lockForm",
      value: function lockForm() {
        var e = this.form.querySelectorAll("input, textarea, button, select");

        for (var t = 0, s = e.length; t < s; ++t) {
          e[t].setAttribute("disabled", "disabled"), e[t].style.pointerEvents = "none", e[t].style.webkitFilter = "grayscale(100%)", e[t].style.filter = "grayscale(100%)";
        }
      }
    }, {
      key: "unlockForm",
      value: function unlockForm() {
        var e = this.form.querySelectorAll("input, textarea, button, select");

        for (var t = 0, s = e.length; t < s; ++t) {
          e[t].removeAttribute("disabled"), e[t].style.pointerEvents = "", e[t].style.webkitFilter = "", e[t].style.filter = "";
        }
      }
    }, {
      key: "renderTooltip",
      value: function renderTooltip(e, t, s) {
        var _this10 = this;

        var f;

        var _e$getBoundingClientR = e.getBoundingClientRect(),
            i = _e$getBoundingClientR.top,
            r = _e$getBoundingClientR.left,
            a = _e$getBoundingClientR.width,
            l = _e$getBoundingClientR.height,
            o = t.getBoundingClientRect(),
            c = s || ((f = this.globalConfig.tooltip) == null ? void 0 : f.position);

        switch (c) {
          case "left":
            {
              t.style.top = "".concat(i + l / 2 - o.height / 2, "px"), t.style.left = "".concat(r - o.width - C, "px");
              break;
            }

          case "top":
            {
              t.style.top = "".concat(i - o.height - C, "px"), t.style.left = "".concat(r + a / 2 - o.width / 2, "px");
              break;
            }

          case "right":
            {
              t.style.top = "".concat(i + l / 2 - o.height / 2, "px"), t.style.left = "".concat(r + a + C, "px");
              break;
            }

          case "bottom":
            {
              t.style.top = "".concat(i + l + C, "px"), t.style.left = "".concat(r + a / 2 - o.width / 2, "px");
              break;
            }
        }

        return t.dataset.direction = c, {
          refresh: function refresh() {
            _this10.renderTooltip(e, t, s);
          }
        };
      }
    }, {
      key: "createErrorLabelElem",
      value: function createErrorLabelElem(e, t, s) {
        var i = document.createElement("div");
        i.innerHTML = t;
        var r = this.isTooltip() ? s == null ? void 0 : s.errorLabelStyle : (s == null ? void 0 : s.errorLabelStyle) || this.globalConfig.errorLabelStyle;
        return Object.assign(i.style, r), i.classList.add((s == null ? void 0 : s.errorLabelCssClass) || this.globalConfig.errorLabelCssClass, "just-validate-error-label"), this.isTooltip() && (i.dataset.tooltip = "true"), this.globalConfig.testingMode && (i.dataset.testId = "error-label-".concat(e)), this.errorLabels.push(i), i;
      }
    }, {
      key: "createSuccessLabelElem",
      value: function createSuccessLabelElem(e, t, s) {
        if (t === void 0) return null;
        var i = document.createElement("div");
        i.innerHTML = t;
        var r = (s == null ? void 0 : s.successLabelStyle) || this.globalConfig.successLabelStyle;
        return Object.assign(i.style, r), i.classList.add((s == null ? void 0 : s.successLabelCssClass) || this.globalConfig.successLabelCssClass, "just-validate-success-label"), this.globalConfig.testingMode && (i.dataset.testId = "success-label-".concat(e)), this.successLabels.push(i), i;
      }
    }, {
      key: "renderFieldLabel",
      value: function renderFieldLabel(e, t) {
        var s, i, r, a, l, o, c;

        if (e.type === "checkbox" || e.type === "radio") {
          var h = document.querySelector("label[for=\"".concat(e.getAttribute("id"), "\"]"));
          ((i = (s = e.parentElement) == null ? void 0 : s.tagName) == null ? void 0 : i.toLowerCase()) === "label" ? (a = (r = e.parentElement) == null ? void 0 : r.parentElement) == null || a.appendChild(t) : h ? (l = h.parentElement) == null || l.appendChild(t) : (o = e.parentElement) == null || o.appendChild(t);
        } else (c = e.parentElement) == null || c.appendChild(t);
      }
    }, {
      key: "renderErrors",
      value: function renderErrors() {
        var _this11 = this;

        var e, t, s, i, r, a;

        if (!!this.isSubmitted) {
          this.clearErrors(), this.isValid = !0;

          var _loop4 = function _loop4(l) {
            var o = _this11.groupFields[l];

            if (o.isValid) {
              o.elems.forEach(function (f) {
                var m, v;
                Object.assign(f.style, ((m = o.config) == null ? void 0 : m.successFieldStyle) || _this11.globalConfig.successFieldStyle), f.classList.add(((v = o.config) == null ? void 0 : v.successFieldCssClass) || _this11.globalConfig.successFieldCssClass);
              });

              var _h = _this11.createSuccessLabelElem(l, o.successMessage, o.config);

              _h && o.groupElem.appendChild(_h);
              return "continue";
            }

            _this11.isValid = !1, o.elems.forEach(function (h) {
              var f, m;
              Object.assign(h.style, ((f = o.config) == null ? void 0 : f.errorFieldStyle) || _this11.globalConfig.errorFieldStyle), h.classList.add(((m = o.config) == null ? void 0 : m.errorFieldCssClass) || _this11.globalConfig.errorFieldCssClass);
            });

            var c = _this11.createErrorLabelElem(l, o.errorMessage, o.config);

            o.groupElem.appendChild(c), _this11.isTooltip() && _this11.tooltips.push(_this11.renderTooltip(o.groupElem, c, (t = (e = o.config) == null ? void 0 : e.tooltip) == null ? void 0 : t.position));
          };

          for (var l in this.groupFields) {
            var _ret2 = _loop4(l);

            if (_ret2 === "continue") continue;
          }

          for (var _l6 in this.fields) {
            var o = this.fields[_l6];

            if (o.isValid) {
              if (!o.asyncCheckPending) {
                var h = this.createSuccessLabelElem(_l6, o.successMessage, o.config);
                h && this.renderFieldLabel(o.elem, h), o.elem.classList.add(((s = o.config) == null ? void 0 : s.successFieldCssClass) || this.globalConfig.successFieldCssClass);
              }

              continue;
            }

            this.isValid = !1, o.elem.classList.add(((i = o.config) == null ? void 0 : i.errorFieldCssClass) || this.globalConfig.errorFieldCssClass);
            var c = this.createErrorLabelElem(_l6, o.errorMessage, o.config);
            this.renderFieldLabel(o.elem, c), this.isTooltip() && this.tooltips.push(this.renderTooltip(o.elem, c, (a = (r = o.config) == null ? void 0 : r.tooltip) == null ? void 0 : a.position));
          }
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _this12 = this;

        this.eventListeners.forEach(function (e) {
          _this12.removeListener(e.type, e.elem, e.func);
        }), Object.keys(this.customStyleTags).forEach(function (e) {
          _this12.customStyleTags[e].remove();
        }), this.clearErrors(), this.globalConfig.lockForm && this.unlockForm();
      }
    }, {
      key: "refresh",
      value: function refresh() {
        var _this13 = this;

        this.destroy(), this.form ? (this.initialize(this.form, this.globalConfig), Object.keys(this.fields).forEach(function (e) {
          _this13.addField(e, _toConsumableArray(_this13.fields[e].rules), _this13.fields[e].config);
        })) : console.error("Cannot initialize the library! Form is not defined");
      }
    }, {
      key: "setCurrentLocale",
      value: function setCurrentLocale(e) {
        if (typeof e != "string" && e !== void 0) {
          console.error("Current locale should be a string");
          return;
        }

        this.currentLocale = e, this.isSubmitted && this.validate();
      }
    }, {
      key: "onSuccess",
      value: function onSuccess(e) {
        return this.onSuccessCallback = e, this;
      }
    }, {
      key: "onFail",
      value: function onFail(e) {
        return this.onFailCallback = e, this;
      }
    }]);

    return O;
  }();

  return O;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImp1c3QtdmFsaWRhdGUubWluLmpzIl0sIm5hbWVzIjpbIl8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInciLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJYIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJaIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwicCIsImIiLCJnIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJMIiwiY2FsbCIsInUiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJKdXN0VmFsaWRhdGUiLCJ4IiwiSSIsIm4iLCJlIiwidHJpbSIsIlQiLCJ0ZXN0IiwiJCIsImxlbmd0aCIsIk0iLCJWIiwiUCIsImoiLCJHIiwiQSIsImQiLCJSZXF1aXJlZCIsIkVtYWlsIiwiTWluTGVuZ3RoIiwiTWF4TGVuZ3RoIiwiUGFzc3dvcmQiLCJOdW1iZXIiLCJNYXhOdW1iZXIiLCJNaW5OdW1iZXIiLCJTdHJvbmdQYXNzd29yZCIsIkN1c3RvbVJlZ2V4cCIsIk1pbkZpbGVzQ291bnQiLCJNYXhGaWxlc0NvdW50IiwiRmlsZXMiLCJ5IiwiayIsIkxhYmVsIiwiTGFiZWxBcnJvdyIsIk4iLCJyZXBsYWNlIiwiU3RyaW5nIiwicSIsIkYiLCJ0aGVuIiwieiIsIkMiLCJTIiwiZXJyb3JGaWVsZFN0eWxlIiwiY29sb3IiLCJib3JkZXIiLCJlcnJvckZpZWxkQ3NzQ2xhc3MiLCJzdWNjZXNzRmllbGRDc3NDbGFzcyIsImVycm9yTGFiZWxTdHlsZSIsImVycm9yTGFiZWxDc3NDbGFzcyIsInN1Y2Nlc3NMYWJlbENzc0NsYXNzIiwiZm9jdXNJbnZhbGlkRmllbGQiLCJsb2NrRm9ybSIsInRlc3RpbmdNb2RlIiwiTyIsInQiLCJzIiwidG9vbHRpcHMiLCJmb3JFYWNoIiwicmVmcmVzaCIsImxhc3RTY3JvbGxQb3NpdGlvbiIsIndpbmRvdyIsInNjcm9sbFkiLCJpc1Njcm9sbFRpY2siLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZWZyZXNoQWxsVG9vbHRpcHMiLCJwcmV2ZW50RGVmYXVsdCIsImlzU3VibWl0dGVkIiwiZ2xvYmFsQ29uZmlnIiwidmFsaWRhdGUiLCJmaW5hbGx5IiwidW5sb2NrRm9ybSIsImlzVmFsaWQiLCJvblN1Y2Nlc3NDYWxsYmFjayIsIm9uRmFpbENhbGxiYWNrIiwiZmllbGRzIiwiaSIsInIiLCJlbGVtIiwidmFsaWRhdGVGaWVsZCIsImdyb3VwRmllbGRzIiwiZWxlbXMiLCJmaW5kIiwiYSIsInZhbGlkYXRlR3JvdXAiLCJ0YXJnZXQiLCJoYW5kbGVGaWVsZENoYW5nZSIsImhhbmRsZUdyb3VwQ2hhbmdlIiwicmVuZGVyRXJyb3JzIiwiaW5pdGlhbGl6ZSIsImZvcm0iLCJlcnJvcnMiLCJlcnJvckxhYmVscyIsImV2ZW50TGlzdGVuZXJzIiwiY3VzdG9tU3R5bGVUYWdzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiRXJyb3IiLCJzZXRGb3JtIiwiSFRNTEZvcm1FbGVtZW50IiwiZGljdExvY2FsZSIsImlzVG9vbHRpcCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImFkZExpc3RlbmVyIiwiaGFuZGxlRG9jdW1lbnRTY3JvbGwiLCJjdXJyZW50TG9jYWxlIiwia2V5IiwiZGljdCIsImVycm9yTWVzc2FnZSIsImdldEVsZW1WYWx1ZSIsImdldExvY2FsaXNlZFN0cmluZyIsInJ1bGUiLCJzdWNjZXNzTWVzc2FnZSIsImdldEZpZWxkRXJyb3JNZXNzYWdlIiwiZ2V0RmllbGRTdWNjZXNzTWVzc2FnZSIsImdldEdyb3VwRXJyb3JNZXNzYWdlIiwiZ2V0R3JvdXBTdWNjZXNzTWVzc2FnZSIsInR5cGUiLCJjaGVja2VkIiwiZmlsZXMiLCJldmVyeSIsInNldEdyb3VwSW52YWxpZCIsInNldEdyb3VwVmFsaWQiLCJwbHVnaW4iLCJzZXRGaWVsZEludmFsaWQiLCJjb25zb2xlIiwiZXJyb3IiLCJsIiwiaXNOYU4iLCJSZWdFeHAiLCJvIiwiaXNGaW5pdGUiLCJjIiwiaCIsImYiLCJtaW5TaXplIiwic2l6ZSIsIm0iLCJtYXhTaXplIiwidiIsIkFycmF5IiwiaXNBcnJheSIsIm5hbWVzIiwiaW5jbHVkZXMiLCJuYW1lIiwiRCIsImV4dGVuc2lvbnMiLCJzcGxpdCIsIkgiLCJ0eXBlcyIsIml0ZW0iLCJ2YWxpZGF0b3IiLCJhc3luY0NoZWNrUGVuZGluZyIsImNhdGNoIiwicnVsZXMiLCJyZXZlcnNlIiwidmFsaWRhdGVGaWVsZFJ1bGUiLCJwdXNoIiwic2V0RmllbGRWYWxpZCIsImNvbmZpZyIsIlByb21pc2UiLCJhbGxTZXR0bGVkIiwidmFsaWRhdGVHcm91cFJ1bGUiLCJzZXRUaW1lb3V0IiwiZm9jdXMiLCJrZXlzIiwiYWZ0ZXJTdWJtaXRWYWxpZGF0aW9uIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlTGlzdGVuZXIiLCJmb3JtU3VibWl0SGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJmdW5jIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImZpbHRlciIsInZhbHVlcyIsImpvaW4iLCJzZXRMaXN0ZW5lcnMiLCJnZXRMaXN0ZW5lclR5cGUiLCJoYW5kbGVyQ2hhbmdlIiwiY2xlYXJFcnJvcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZnJvbSIsImdyb3VwRWxlbSIsImlzRGlydHkiLCJyZW1vdmUiLCJzdWNjZXNzTGFiZWxzIiwic3R5bGUiLCJzdWNjZXNzRmllbGRTdHlsZSIsImNsYXNzTGlzdCIsInRvb2x0aXAiLCJwb2ludGVyRXZlbnRzIiwid2Via2l0RmlsdGVyIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwicG9zaXRpb24iLCJkYXRhc2V0IiwiZGlyZWN0aW9uIiwicmVuZGVyVG9vbHRpcCIsImlubmVySFRNTCIsImFzc2lnbiIsImFkZCIsInRlc3RJZCIsInN1Y2Nlc3NMYWJlbFN0eWxlIiwiZ2V0QXR0cmlidXRlIiwicGFyZW50RWxlbWVudCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsImNyZWF0ZVN1Y2Nlc3NMYWJlbEVsZW0iLCJjcmVhdGVFcnJvckxhYmVsRWxlbSIsInJlbmRlckZpZWxkTGFiZWwiLCJkZXN0cm95IiwiYWRkRmllbGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLENBQUMsR0FBQ0MsTUFBTSxDQUFDQyxjQUFiO0FBQTRCLElBQUlDLENBQUMsR0FBQ0YsTUFBTSxDQUFDRyxxQkFBYjtBQUFtQyxJQUFJQyxDQUFDLEdBQUNKLE1BQU0sQ0FBQ0ssU0FBUCxDQUFpQkMsY0FBdkI7QUFBQSxJQUFzQ0MsQ0FBQyxHQUFDUCxNQUFNLENBQUNLLFNBQVAsQ0FBaUJHLG9CQUF6RDs7QUFBOEUsSUFBSUMsQ0FBQyxHQUFDLFNBQUZBLENBQUUsQ0FBQ0MsQ0FBRCxFQUFHQyxDQUFILEVBQUtDLENBQUw7QUFBQSxTQUFTRCxDQUFDLElBQUlELENBQUwsR0FBT1gsQ0FBQyxDQUFDVyxDQUFELEVBQUdDLENBQUgsRUFBSztBQUFDRSxJQUFBQSxVQUFVLEVBQUMsQ0FBQyxDQUFiO0FBQWVDLElBQUFBLFlBQVksRUFBQyxDQUFDLENBQTdCO0FBQStCQyxJQUFBQSxRQUFRLEVBQUMsQ0FBQyxDQUF6QztBQUEyQ0MsSUFBQUEsS0FBSyxFQUFDSjtBQUFqRCxHQUFMLENBQVIsR0FBa0VGLENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEdBQUtDLENBQWhGO0FBQUEsQ0FBTjtBQUFBLElBQXdGSyxDQUFDLEdBQUMsU0FBRkEsQ0FBRSxDQUFDUCxDQUFELEVBQUdDLENBQUgsRUFBTztBQUFDLE9BQUksSUFBSUMsQ0FBUixJQUFhRCxDQUFDLEtBQUdBLENBQUMsR0FBQyxFQUFMLENBQWQ7QUFBdUJQLElBQUFBLENBQUMsQ0FBQ2MsSUFBRixDQUFPUCxDQUFQLEVBQVNDLENBQVQsS0FBYUgsQ0FBQyxDQUFDQyxDQUFELEVBQUdFLENBQUgsRUFBS0QsQ0FB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ZW50IjpbInZhciBfPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgdz1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO3ZhciBYPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksWj1PYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO3ZhciBFPShwLGIsZyk9PmIgaW4gcD9fKHAsYix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6Z30pOnBbYl09ZyxMPShwLGIpPT57Zm9yKHZhciBnIGluIGJ8fChiPXt9KSlYLmNhbGwoYixnKSYmRShwLGcsYltnXSk7aWYodylmb3IodmFyIGcgb2YgdyhiKSlaLmNhbGwoYixnKSYmRShwLGcsYltnXSk7cmV0dXJuIHB9O3ZhciB1PShwLGIsZyk9PihFKHAsdHlwZW9mIGIhPVwic3ltYm9sXCI/YitcIlwiOmIsZyksZyk7KGZ1bmN0aW9uKHAsYil7dHlwZW9mIGV4cG9ydHM9PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPVwidW5kZWZpbmVkXCI/bW9kdWxlLmV4cG9ydHM9YigpOnR5cGVvZiBkZWZpbmU9PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZD9kZWZpbmUoYik6KHA9dHlwZW9mIGdsb2JhbFRoaXMhPVwidW5kZWZpbmVkXCI/Z2xvYmFsVGhpczpwfHxzZWxmLHAuSnVzdFZhbGlkYXRlPWIoKSl9KSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgcD0vXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvLGI9L15bMC05XSskLyxnPS9eKD89LipbQS1aYS16XSkoPz0uKlxcZClbQS1aYS16XFxkXXs4LH0kLyx4PS9eKD89LipbYS16XSkoPz0uKltBLVpdKSg/PS4qXFxkKSg/PS4qW0AkISUqPyZdKVtBLVphLXpcXGRAJCElKj8mXXs4LH0kLyxJPW49PntsZXQgZT1uO3JldHVybiB0eXBlb2Ygbj09XCJzdHJpbmdcIiYmKGU9bi50cmltKCkpLCFlfSxUPW49PnAudGVzdChuKSwkPShuLGUpPT5uLmxlbmd0aD5lLE09KG4sZSk9Pm4ubGVuZ3RoPGUsVj1uPT5iLnRlc3QobiksUD1uPT5nLnRlc3Qobiksaj1uPT54LnRlc3QobiksRz0obixlKT0+bj5lLEE9KG4sZSk9Pm48ZTt2YXIgZDsoZnVuY3Rpb24obil7bi5SZXF1aXJlZD1cInJlcXVpcmVkXCIsbi5FbWFpbD1cImVtYWlsXCIsbi5NaW5MZW5ndGg9XCJtaW5MZW5ndGhcIixuLk1heExlbmd0aD1cIm1heExlbmd0aFwiLG4uUGFzc3dvcmQ9XCJwYXNzd29yZFwiLG4uTnVtYmVyPVwibnVtYmVyXCIsbi5NYXhOdW1iZXI9XCJtYXhOdW1iZXJcIixuLk1pbk51bWJlcj1cIm1pbk51bWJlclwiLG4uU3Ryb25nUGFzc3dvcmQ9XCJzdHJvbmdQYXNzd29yZFwiLG4uQ3VzdG9tUmVnZXhwPVwiY3VzdG9tUmVnZXhwXCIsbi5NaW5GaWxlc0NvdW50PVwibWluRmlsZXNDb3VudFwiLG4uTWF4RmlsZXNDb3VudD1cIm1heEZpbGVzQ291bnRcIixuLkZpbGVzPVwiZmlsZXNcIn0pKGR8fChkPXt9KSk7dmFyIHk7KGZ1bmN0aW9uKG4pe24uUmVxdWlyZWQ9XCJyZXF1aXJlZFwifSkoeXx8KHk9e30pKTt2YXIgazsoZnVuY3Rpb24obil7bi5MYWJlbD1cImxhYmVsXCIsbi5MYWJlbEFycm93PVwibGFiZWxBcnJvd1wifSkoa3x8KGs9e30pKTtjb25zdCBOPShuLGUpPT57c3dpdGNoKG4pe2Nhc2UgZC5SZXF1aXJlZDpyZXR1cm5cIlRoZSBmaWVsZCBpcyByZXF1aXJlZFwiO2Nhc2UgZC5FbWFpbDpyZXR1cm5cIkVtYWlsIGhhcyBpbnZhbGlkIGZvcm1hdFwiO2Nhc2UgZC5NYXhMZW5ndGg6cmV0dXJuXCJUaGUgZmllbGQgbXVzdCBjb250YWluIGEgbWF4aW11bSBvZiA6dmFsdWUgY2hhcmFjdGVyc1wiLnJlcGxhY2UoXCI6dmFsdWVcIixTdHJpbmcoZSkpO2Nhc2UgZC5NaW5MZW5ndGg6cmV0dXJuXCJUaGUgZmllbGQgbXVzdCBjb250YWluIGEgbWluaW11bSBvZiA6dmFsdWUgY2hhcmFjdGVyc1wiLnJlcGxhY2UoXCI6dmFsdWVcIixTdHJpbmcoZSkpO2Nhc2UgZC5QYXNzd29yZDpyZXR1cm5cIlBhc3N3b3JkIG11c3QgY29udGFpbiBtaW5pbXVtIGVpZ2h0IGNoYXJhY3RlcnMsIGF0IGxlYXN0IG9uZSBsZXR0ZXIgYW5kIG9uZSBudW1iZXJcIjtjYXNlIGQuTnVtYmVyOnJldHVyblwiVmFsdWUgc2hvdWxkIGJlIGEgbnVtYmVyXCI7Y2FzZSBkLlN0cm9uZ1Bhc3N3b3JkOnJldHVyblwiUGFzc3dvcmQgc2hvdWxkIGNvbnRhaW4gbWluaW11bSBlaWdodCBjaGFyYWN0ZXJzLCBhdCBsZWFzdCBvbmUgdXBwZXJjYXNlIGxldHRlciwgb25lIGxvd2VyY2FzZSBsZXR0ZXIsIG9uZSBudW1iZXIgYW5kIG9uZSBzcGVjaWFsIGNoYXJhY3RlclwiO2Nhc2UgZC5NYXhOdW1iZXI6cmV0dXJuXCJOdW1iZXIgc2hvdWxkIGJlIGxlc3Mgb3IgZXF1YWwgdGhhbiA6dmFsdWVcIi5yZXBsYWNlKFwiOnZhbHVlXCIsU3RyaW5nKGUpKTtjYXNlIGQuTWluTnVtYmVyOnJldHVyblwiTnVtYmVyIHNob3VsZCBiZSBtb3JlIG9yIGVxdWFsIHRoYW4gOnZhbHVlXCIucmVwbGFjZShcIjp2YWx1ZVwiLFN0cmluZyhlKSk7Y2FzZSBkLk1pbkZpbGVzQ291bnQ6cmV0dXJuXCJGaWxlcyBjb3VudCBzaG91bGQgYmUgbW9yZSBvciBlcXVhbCB0aGFuIDp2YWx1ZVwiLnJlcGxhY2UoXCI6dmFsdWVcIixTdHJpbmcoZSkpO2Nhc2UgZC5NYXhGaWxlc0NvdW50OnJldHVyblwiRmlsZXMgY291bnQgc2hvdWxkIGJlIGxlc3Mgb3IgZXF1YWwgdGhhbiA6dmFsdWVcIi5yZXBsYWNlKFwiOnZhbHVlXCIsU3RyaW5nKGUpKTtjYXNlIGQuRmlsZXM6cmV0dXJuXCJVcGxvYWRlZCBmaWxlcyBoYXZlIG9uZSBvciBzZXZlcmFsIGludmFsaWQgcHJvcGVydGllcyAoZXh0ZW5zaW9uL3NpemUvdHlwZSBldGMpXCI7ZGVmYXVsdDpyZXR1cm5cIlZhbHVlIGlzIGluY29ycmVjdFwifX0scT1uPT57c3dpdGNoKG4pe2Nhc2UgeS5SZXF1aXJlZDpyZXR1cm5cIlRoZSBmaWVsZCBpcyByZXF1aXJlZFwiO2RlZmF1bHQ6cmV0dXJuXCJHcm91cCBpcyBpbmNvcnJlY3RcIn19LEY9bj0+ISFuJiZ0eXBlb2Ygbi50aGVuPT1cImZ1bmN0aW9uXCIsej1cIi5qdXN0LXZhbGlkYXRlLWVycm9yLWxhYmVsW2RhdGEtdG9vbHRpcD10cnVlXXtwb3NpdGlvbjpmaXhlZDtwYWRkaW5nOjRweCA4cHg7YmFja2dyb3VuZDojNDIzZjNmO2NvbG9yOiNmZmY7d2hpdGUtc3BhY2U6bm93cmFwO3otaW5kZXg6MTA7Ym9yZGVyLXJhZGl1czo0cHg7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTVweCl9Lmp1c3QtdmFsaWRhdGUtZXJyb3ItbGFiZWxbZGF0YS10b29sdGlwPXRydWVdOmJlZm9yZXtjb250ZW50OicnO3dpZHRoOjA7aGVpZ2h0OjA7Ym9yZGVyLWxlZnQ6c29saWQgNXB4IHRyYW5zcGFyZW50O2JvcmRlci1yaWdodDpzb2xpZCA1cHggdHJhbnNwYXJlbnQ7Ym9yZGVyLWJvdHRvbTpzb2xpZCA1cHggIzQyM2YzZjtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjM7ZGlzcGxheTpibG9jaztib3R0b206LTVweDt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyk7bGVmdDpjYWxjKDUwJSAtIDVweCl9Lmp1c3QtdmFsaWRhdGUtZXJyb3ItbGFiZWxbZGF0YS10b29sdGlwPXRydWVdW2RhdGEtZGlyZWN0aW9uPWxlZnRde3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01cHgpfS5qdXN0LXZhbGlkYXRlLWVycm9yLWxhYmVsW2RhdGEtdG9vbHRpcD10cnVlXVtkYXRhLWRpcmVjdGlvbj1sZWZ0XTpiZWZvcmV7cmlnaHQ6LTdweDtib3R0b206YXV0bztsZWZ0OmF1dG87dG9wOmNhbGMoNTAlIC0gMnB4KTt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKX0uanVzdC12YWxpZGF0ZS1lcnJvci1sYWJlbFtkYXRhLXRvb2x0aXA9dHJ1ZV1bZGF0YS1kaXJlY3Rpb249cmlnaHRde3RyYW5zZm9ybTp0cmFuc2xhdGVYKDVweCl9Lmp1c3QtdmFsaWRhdGUtZXJyb3ItbGFiZWxbZGF0YS10b29sdGlwPXRydWVdW2RhdGEtZGlyZWN0aW9uPXJpZ2h0XTpiZWZvcmV7cmlnaHQ6YXV0bztib3R0b206YXV0bztsZWZ0Oi03cHg7dG9wOmNhbGMoNTAlIC0gMnB4KTt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyl9Lmp1c3QtdmFsaWRhdGUtZXJyb3ItbGFiZWxbZGF0YS10b29sdGlwPXRydWVdW2RhdGEtZGlyZWN0aW9uPWJvdHRvbV17dHJhbnNmb3JtOnRyYW5zbGF0ZVkoNXB4KX0uanVzdC12YWxpZGF0ZS1lcnJvci1sYWJlbFtkYXRhLXRvb2x0aXA9dHJ1ZV1bZGF0YS1kaXJlY3Rpb249Ym90dG9tXTpiZWZvcmV7cmlnaHQ6YXV0bztib3R0b206YXV0bztsZWZ0OmNhbGMoNTAlIC0gNXB4KTt0b3A6LTVweDt0cmFuc2Zvcm06cm90YXRlKDApfVwiLEM9NSxTPXtlcnJvckZpZWxkU3R5bGU6e2NvbG9yOlwiI2I4MTExMVwiLGJvcmRlcjpcIjFweCBzb2xpZCAjQjgxMTExXCJ9LGVycm9yRmllbGRDc3NDbGFzczpcImp1c3QtdmFsaWRhdGUtZXJyb3ItZmllbGRcIixzdWNjZXNzRmllbGRDc3NDbGFzczpcImp1c3QtdmFsaWRhdGUtc3VjY2Vzcy1maWVsZFwiLGVycm9yTGFiZWxTdHlsZTp7Y29sb3I6XCIjYjgxMTExXCJ9LGVycm9yTGFiZWxDc3NDbGFzczpcImp1c3QtdmFsaWRhdGUtZXJyb3ItbGFiZWxcIixzdWNjZXNzTGFiZWxDc3NDbGFzczpcImp1c3QtdmFsaWRhdGUtc3VjY2Vzcy1sYWJlbFwiLGZvY3VzSW52YWxpZEZpZWxkOiEwLGxvY2tGb3JtOiEwLHRlc3RpbmdNb2RlOiExfTtjbGFzcyBPe2NvbnN0cnVjdG9yKGUsdCxzKXt1KHRoaXMsXCJmb3JtXCIsbnVsbCk7dSh0aGlzLFwiZmllbGRzXCIse30pO3UodGhpcyxcImdyb3VwRmllbGRzXCIse30pO3UodGhpcyxcImVycm9yc1wiLHt9KTt1KHRoaXMsXCJpc1ZhbGlkXCIsITEpO3UodGhpcyxcImlzU3VibWl0dGVkXCIsITEpO3UodGhpcyxcImdsb2JhbENvbmZpZ1wiLFMpO3UodGhpcyxcImVycm9yTGFiZWxzXCIsW10pO3UodGhpcyxcInN1Y2Nlc3NMYWJlbHNcIixbXSk7dSh0aGlzLFwiZXZlbnRMaXN0ZW5lcnNcIixbXSk7dSh0aGlzLFwiZGljdExvY2FsZVwiLFtdKTt1KHRoaXMsXCJjdXJyZW50TG9jYWxlXCIpO3UodGhpcyxcImN1c3RvbVN0eWxlVGFnc1wiLHt9KTt1KHRoaXMsXCJvblN1Y2Nlc3NDYWxsYmFja1wiKTt1KHRoaXMsXCJvbkZhaWxDYWxsYmFja1wiKTt1KHRoaXMsXCJ0b29sdGlwc1wiLFtdKTt1KHRoaXMsXCJsYXN0U2Nyb2xsUG9zaXRpb25cIik7dSh0aGlzLFwiaXNTY3JvbGxUaWNrXCIpO3UodGhpcyxcInJlZnJlc2hBbGxUb29sdGlwc1wiLCgpPT57dGhpcy50b29sdGlwcy5mb3JFYWNoKGU9PntlLnJlZnJlc2goKX0pfSk7dSh0aGlzLFwiaGFuZGxlRG9jdW1lbnRTY3JvbGxcIiwoKT0+e3RoaXMubGFzdFNjcm9sbFBvc2l0aW9uPXdpbmRvdy5zY3JvbGxZLHRoaXMuaXNTY3JvbGxUaWNrfHwod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKT0+e3RoaXMucmVmcmVzaEFsbFRvb2x0aXBzKCksdGhpcy5pc1Njcm9sbFRpY2s9ITF9KSx0aGlzLmlzU2Nyb2xsVGljaz0hMCl9KTt1KHRoaXMsXCJmb3JtU3VibWl0SGFuZGxlclwiLGU9PntlLnByZXZlbnREZWZhdWx0KCksdGhpcy5pc1N1Ym1pdHRlZD0hMCx0aGlzLmdsb2JhbENvbmZpZy5sb2NrRm9ybSYmdGhpcy5sb2NrRm9ybSgpLHRoaXMudmFsaWRhdGUoKS5maW5hbGx5KCgpPT57dmFyIHQsczt0aGlzLmdsb2JhbENvbmZpZy5sb2NrRm9ybSYmdGhpcy51bmxvY2tGb3JtKCksdGhpcy5pc1ZhbGlkPyh0PXRoaXMub25TdWNjZXNzQ2FsbGJhY2spPT1udWxsfHx0LmNhbGwodGhpcyxlKToocz10aGlzLm9uRmFpbENhbGxiYWNrKT09bnVsbHx8cy5jYWxsKHRoaXMsdGhpcy5maWVsZHMpfSl9KTt1KHRoaXMsXCJoYW5kbGVGaWVsZENoYW5nZVwiLGU9PntsZXQgdCxzO2Zvcihjb25zdCBpIGluIHRoaXMuZmllbGRzKXtjb25zdCByPXRoaXMuZmllbGRzW2ldO2lmKHIuZWxlbT09PWUpe3Q9cixzPWk7YnJlYWt9fSF0fHwhc3x8dGhpcy52YWxpZGF0ZUZpZWxkKHMsdCwhMCl9KTt1KHRoaXMsXCJoYW5kbGVHcm91cENoYW5nZVwiLGU9PntsZXQgdCxzO2Zvcihjb25zdCBpIGluIHRoaXMuZ3JvdXBGaWVsZHMpe2NvbnN0IHI9dGhpcy5ncm91cEZpZWxkc1tpXTtpZihyLmVsZW1zLmZpbmQoYT0+YT09PWUpKXt0PXIscz1pO2JyZWFrfX0hdHx8IXN8fHRoaXMudmFsaWRhdGVHcm91cChzLHQpfSk7dSh0aGlzLFwiaGFuZGxlckNoYW5nZVwiLGU9PnshZS50YXJnZXR8fCh0aGlzLmhhbmRsZUZpZWxkQ2hhbmdlKGUudGFyZ2V0KSx0aGlzLmhhbmRsZUdyb3VwQ2hhbmdlKGUudGFyZ2V0KSx0aGlzLnJlbmRlckVycm9ycygpKX0pO3RoaXMuaW5pdGlhbGl6ZShlLHQscyl9aW5pdGlhbGl6ZShlLHQscyl7aWYodGhpcy5mb3JtPW51bGwsdGhpcy5lcnJvcnM9e30sdGhpcy5pc1ZhbGlkPSExLHRoaXMuaXNTdWJtaXR0ZWQ9ITEsdGhpcy5nbG9iYWxDb25maWc9Uyx0aGlzLmVycm9yTGFiZWxzPVtdLHRoaXMuZXZlbnRMaXN0ZW5lcnM9W10sdGhpcy5jdXN0b21TdHlsZVRhZ3M9e30sdGhpcy50b29sdGlwcz1bXSx0eXBlb2YgZT09XCJzdHJpbmdcIil7Y29uc3QgaT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpO2lmKCFpKXRocm93IEVycm9yKGBGb3JtIHdpdGggJHtlfSBzZWxlY3RvciBub3QgZm91bmQhIFBsZWFzZSBjaGVjayB0aGUgZm9ybSBzZWxlY3RvcmApO3RoaXMuc2V0Rm9ybShpKX1lbHNlIGlmKGUgaW5zdGFuY2VvZiBIVE1MRm9ybUVsZW1lbnQpdGhpcy5zZXRGb3JtKGUpO2Vsc2UgdGhyb3cgRXJyb3IoXCJGb3JtIHNlbGVjdG9yIGlzIG5vdCB2YWxpZC4gUGxlYXNlIHNwZWNpZnkgYSBzdHJpbmcgc2VsZWN0b3Igb3IgYSBET00gZWxlbWVudC5cIik7aWYodGhpcy5nbG9iYWxDb25maWc9TChMKHt9LFMpLHQpLHMmJih0aGlzLmRpY3RMb2NhbGU9cyksdGhpcy5pc1Rvb2x0aXAoKSl7Y29uc3QgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7aS50ZXh0Q29udGVudD16LHRoaXMuY3VzdG9tU3R5bGVUYWdzW2suTGFiZWxdPWRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoaSksdGhpcy5hZGRMaXN0ZW5lcihcInNjcm9sbFwiLGRvY3VtZW50LHRoaXMuaGFuZGxlRG9jdW1lbnRTY3JvbGwpfX1nZXRMb2NhbGlzZWRTdHJpbmcoZSl7dmFyIHM7cmV0dXJuIXRoaXMuY3VycmVudExvY2FsZXx8IXRoaXMuZGljdExvY2FsZS5sZW5ndGg/ZTooKHM9dGhpcy5kaWN0TG9jYWxlLmZpbmQoaT0+aS5rZXk9PT1lKSk9PW51bGw/dm9pZCAwOnMuZGljdFt0aGlzLmN1cnJlbnRMb2NhbGVdKXx8ZX1nZXRGaWVsZEVycm9yTWVzc2FnZShlLHQpe2NvbnN0IHM9dHlwZW9mIGUuZXJyb3JNZXNzYWdlPT1cImZ1bmN0aW9uXCI/ZS5lcnJvck1lc3NhZ2UodGhpcy5nZXRFbGVtVmFsdWUodCksdGhpcy5maWVsZHMpOmUuZXJyb3JNZXNzYWdlO3JldHVybiB0aGlzLmdldExvY2FsaXNlZFN0cmluZyhzKXx8TihlLnJ1bGUsZS52YWx1ZSl9Z2V0RmllbGRTdWNjZXNzTWVzc2FnZShlLHQpe2NvbnN0IHM9dHlwZW9mIGU9PVwiZnVuY3Rpb25cIj9lKHRoaXMuZ2V0RWxlbVZhbHVlKHQpLHRoaXMuZmllbGRzKTplO3JldHVybiB0aGlzLmdldExvY2FsaXNlZFN0cmluZyhzKX1nZXRHcm91cEVycm9yTWVzc2FnZShlKXtyZXR1cm4gdGhpcy5nZXRMb2NhbGlzZWRTdHJpbmcoZS5lcnJvck1lc3NhZ2UpfHxxKGUucnVsZSl9Z2V0R3JvdXBTdWNjZXNzTWVzc2FnZShlKXtyZXR1cm4gdGhpcy5nZXRMb2NhbGlzZWRTdHJpbmcoZS5zdWNjZXNzTWVzc2FnZSl9c2V0RmllbGRJbnZhbGlkKGUsdCl7dGhpcy5maWVsZHNbZV0uaXNWYWxpZD0hMSx0aGlzLmZpZWxkc1tlXS5lcnJvck1lc3NhZ2U9dGhpcy5nZXRGaWVsZEVycm9yTWVzc2FnZSh0LHRoaXMuZmllbGRzW2VdLmVsZW0pfXNldEZpZWxkVmFsaWQoZSx0KXt0aGlzLmZpZWxkc1tlXS5pc1ZhbGlkPSEwLHQhPT12b2lkIDAmJih0aGlzLmZpZWxkc1tlXS5zdWNjZXNzTWVzc2FnZT10aGlzLmdldEZpZWxkU3VjY2Vzc01lc3NhZ2UodCx0aGlzLmZpZWxkc1tlXS5lbGVtKSl9c2V0R3JvdXBJbnZhbGlkKGUsdCl7dGhpcy5ncm91cEZpZWxkc1tlXS5pc1ZhbGlkPSExLHRoaXMuZ3JvdXBGaWVsZHNbZV0uZXJyb3JNZXNzYWdlPXRoaXMuZ2V0R3JvdXBFcnJvck1lc3NhZ2UodCl9c2V0R3JvdXBWYWxpZChlLHQpe3RoaXMuZ3JvdXBGaWVsZHNbZV0uaXNWYWxpZD0hMCx0aGlzLmdyb3VwRmllbGRzW2VdLnN1Y2Nlc3NNZXNzYWdlPXRoaXMuZ2V0R3JvdXBTdWNjZXNzTWVzc2FnZSh0KX1nZXRFbGVtVmFsdWUoZSl7c3dpdGNoKGUudHlwZSl7Y2FzZVwiY2hlY2tib3hcIjpyZXR1cm4gZS5jaGVja2VkO2Nhc2VcImZpbGVcIjpyZXR1cm4gZS5maWxlcztkZWZhdWx0OnJldHVybiBlLnZhbHVlfX12YWxpZGF0ZUdyb3VwUnVsZShlLHQscyxpKXtzd2l0Y2goaS5ydWxlKXtjYXNlIHkuUmVxdWlyZWQ6KHQ9PT1cInJhZGlvXCJ8fHQ9PT1cImNoZWNrYm94XCIpJiYocy5ldmVyeShyPT4hci5jaGVja2VkKT90aGlzLnNldEdyb3VwSW52YWxpZChlLGkpOnRoaXMuc2V0R3JvdXBWYWxpZChlLGkpKX19dmFsaWRhdGVGaWVsZFJ1bGUoZSx0LHMsaT0hMSl7Y29uc3Qgcj1zLnZhbHVlLGE9dGhpcy5nZXRFbGVtVmFsdWUodCk7aWYocy5wbHVnaW4pe3MucGx1Z2luKGEsdGhpcy5maWVsZHMpfHx0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO3JldHVybn1zd2l0Y2gocy5ydWxlKXtjYXNlIGQuUmVxdWlyZWQ6e0koYSkmJnRoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7YnJlYWt9Y2FzZSBkLkVtYWlsOntpZih0eXBlb2YgYSE9XCJzdHJpbmdcIil7dGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTticmVha31UKGEpfHx0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfWNhc2UgZC5NYXhMZW5ndGg6e2lmKHI9PT12b2lkIDApe2NvbnNvbGUuZXJyb3IoYFZhbHVlIGZvciAke3MucnVsZX0gcnVsZSBmb3IgWyR7ZX1dIGZpZWxkIGlzIG5vdCBkZWZpbmVkLiBUaGUgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gKSx0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfWlmKHR5cGVvZiByIT1cIm51bWJlclwiKXtjb25zb2xlLmVycm9yKGBWYWx1ZSBmb3IgJHtzLnJ1bGV9IHJ1bGUgZm9yIFske2V9XSBzaG91bGQgYmUgYSBudW1iZXIuIFRoZSBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmApLHRoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7YnJlYWt9aWYodHlwZW9mIGEhPVwic3RyaW5nXCIpe3RoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7YnJlYWt9aWYoYT09PVwiXCIpYnJlYWs7JChhLHIpJiZ0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfWNhc2UgZC5NaW5MZW5ndGg6e2lmKHI9PT12b2lkIDApe2NvbnNvbGUuZXJyb3IoYFZhbHVlIGZvciAke3MucnVsZX0gcnVsZSBmb3IgWyR7ZX1dIGZpZWxkIGlzIG5vdCBkZWZpbmVkLiBUaGUgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gKSx0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfWlmKHR5cGVvZiByIT1cIm51bWJlclwiKXtjb25zb2xlLmVycm9yKGBWYWx1ZSBmb3IgJHtzLnJ1bGV9IHJ1bGUgZm9yIFske2V9XSBzaG91bGQgYmUgYSBudW1iZXIuIFRoZSBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmApLHRoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7YnJlYWt9aWYodHlwZW9mIGEhPVwic3RyaW5nXCIpe3RoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7YnJlYWt9aWYoYT09PVwiXCIpYnJlYWs7TShhLHIpJiZ0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfWNhc2UgZC5QYXNzd29yZDp7aWYodHlwZW9mIGEhPVwic3RyaW5nXCIpe3RoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7YnJlYWt9aWYoYT09PVwiXCIpYnJlYWs7UChhKXx8dGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTticmVha31jYXNlIGQuU3Ryb25nUGFzc3dvcmQ6e2lmKHR5cGVvZiBhIT1cInN0cmluZ1wiKXt0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfWlmKGE9PT1cIlwiKWJyZWFrO2ooYSl8fHRoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7YnJlYWt9Y2FzZSBkLk51bWJlcjp7aWYodHlwZW9mIGEhPVwic3RyaW5nXCIpe3RoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7YnJlYWt9aWYoYT09PVwiXCIpYnJlYWs7VihhKXx8dGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTticmVha31jYXNlIGQuTWF4TnVtYmVyOntpZihyPT09dm9pZCAwKXtjb25zb2xlLmVycm9yKGBWYWx1ZSBmb3IgJHtzLnJ1bGV9IHJ1bGUgZm9yIFske2V9XSBmaWVsZCBpcyBub3QgZGVmaW5lZC4gVGhlIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYCksdGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTticmVha31pZih0eXBlb2YgciE9XCJudW1iZXJcIil7Y29uc29sZS5lcnJvcihgVmFsdWUgZm9yICR7cy5ydWxlfSBydWxlIGZvciBbJHtlfV0gZmllbGQgc2hvdWxkIGJlIGEgbnVtYmVyLiBUaGUgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gKSx0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfWlmKHR5cGVvZiBhIT1cInN0cmluZ1wiKXt0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfWlmKGE9PT1cIlwiKWJyZWFrO2NvbnN0IGw9K2E7KE51bWJlci5pc05hTihsKXx8RyhsLHIpKSYmdGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTticmVha31jYXNlIGQuTWluTnVtYmVyOntpZihyPT09dm9pZCAwKXtjb25zb2xlLmVycm9yKGBWYWx1ZSBmb3IgJHtzLnJ1bGV9IHJ1bGUgZm9yIFske2V9XSBmaWVsZCBpcyBub3QgZGVmaW5lZC4gVGhlIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYCksdGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTticmVha31pZih0eXBlb2YgciE9XCJudW1iZXJcIil7Y29uc29sZS5lcnJvcihgVmFsdWUgZm9yICR7cy5ydWxlfSBydWxlIGZvciBbJHtlfV0gZmllbGQgc2hvdWxkIGJlIGEgbnVtYmVyLiBUaGUgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gKSx0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfWlmKHR5cGVvZiBhIT1cInN0cmluZ1wiKXt0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfWlmKGE9PT1cIlwiKWJyZWFrO2NvbnN0IGw9K2E7KE51bWJlci5pc05hTihsKXx8QShsLHIpKSYmdGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTticmVha31jYXNlIGQuQ3VzdG9tUmVnZXhwOntpZihyPT09dm9pZCAwKXtjb25zb2xlLmVycm9yKGBWYWx1ZSBmb3IgJHtzLnJ1bGV9IHJ1bGUgZm9yIFske2V9XSBmaWVsZCBpcyBub3QgZGVmaW5lZC4gVGhpcyBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmApLHRoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7cmV0dXJufWxldCBsO3RyeXtsPW5ldyBSZWdFeHAocil9Y2F0Y2h7Y29uc29sZS5lcnJvcihgVmFsdWUgZm9yICR7cy5ydWxlfSBydWxlIGZvciBbJHtlfV0gc2hvdWxkIGJlIGEgdmFsaWQgcmVnZXhwLiBUaGlzIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYCksdGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTticmVha31jb25zdCBvPVN0cmluZyhhKTtvIT09XCJcIiYmIWwudGVzdChvKSYmdGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTticmVha31jYXNlIGQuTWluRmlsZXNDb3VudDp7aWYocj09PXZvaWQgMCl7Y29uc29sZS5lcnJvcihgVmFsdWUgZm9yICR7cy5ydWxlfSBydWxlIGZvciBbJHtlfV0gZmllbGQgaXMgbm90IGRlZmluZWQuIFRoaXMgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gKSx0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfWlmKHR5cGVvZiByIT1cIm51bWJlclwiKXtjb25zb2xlLmVycm9yKGBWYWx1ZSBmb3IgJHtzLnJ1bGV9IHJ1bGUgZm9yIFske2V9XSBmaWVsZCBzaG91bGQgYmUgYSBudW1iZXIuIFRoZSBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmApLHRoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7YnJlYWt9aWYoTnVtYmVyLmlzRmluaXRlKGE9PW51bGw/dm9pZCAwOmEubGVuZ3RoKSYmYS5sZW5ndGg8cil7dGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTticmVha31icmVha31jYXNlIGQuTWF4RmlsZXNDb3VudDp7aWYocj09PXZvaWQgMCl7Y29uc29sZS5lcnJvcihgVmFsdWUgZm9yICR7cy5ydWxlfSBydWxlIGZvciBbJHtlfV0gZmllbGQgaXMgbm90IGRlZmluZWQuIFRoaXMgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gKSx0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfWlmKHR5cGVvZiByIT1cIm51bWJlclwiKXtjb25zb2xlLmVycm9yKGBWYWx1ZSBmb3IgJHtzLnJ1bGV9IHJ1bGUgZm9yIFske2V9XSBmaWVsZCBzaG91bGQgYmUgYSBudW1iZXIuIFRoZSBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmApLHRoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7YnJlYWt9aWYoTnVtYmVyLmlzRmluaXRlKGE9PW51bGw/dm9pZCAwOmEubGVuZ3RoKSYmYS5sZW5ndGg+cil7dGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTticmVha31icmVha31jYXNlIGQuRmlsZXM6e2lmKHI9PT12b2lkIDApe2NvbnNvbGUuZXJyb3IoYFZhbHVlIGZvciAke3MucnVsZX0gcnVsZSBmb3IgWyR7ZX1dIGZpZWxkIGlzIG5vdCBkZWZpbmVkLiBUaGlzIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYCksdGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTtyZXR1cm59aWYodHlwZW9mIHIhPVwib2JqZWN0XCIpe2NvbnNvbGUuZXJyb3IoYFZhbHVlIGZvciAke3MucnVsZX0gcnVsZSBmb3IgWyR7ZX1dIGZpZWxkIHNob3VsZCBiZSBhbiBvYmplY3QuIFRoaXMgZmllbGQgd2lsbCBiZSBhbHdheXMgaW52YWxpZC5gKSx0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO3JldHVybn1jb25zdCBsPXIuZmlsZXM7aWYodHlwZW9mIGwhPVwib2JqZWN0XCIpe2NvbnNvbGUuZXJyb3IoYFZhbHVlIGZvciAke3MucnVsZX0gcnVsZSBmb3IgWyR7ZX1dIGZpZWxkIHNob3VsZCBiZSBhbiBvYmplY3Qgd2l0aCBmaWxlcyBhcnJheS4gVGhpcyBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmApLHRoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7cmV0dXJufWNvbnN0IG89KGMsaCk9Pntjb25zdCBmPU51bWJlci5pc0Zpbml0ZShoLm1pblNpemUpJiZjLnNpemU8aC5taW5TaXplLG09TnVtYmVyLmlzRmluaXRlKGgubWF4U2l6ZSkmJmMuc2l6ZT5oLm1heFNpemUsdj1BcnJheS5pc0FycmF5KGgubmFtZXMpJiYhaC5uYW1lcy5pbmNsdWRlcyhjLm5hbWUpLEQ9QXJyYXkuaXNBcnJheShoLmV4dGVuc2lvbnMpJiYhaC5leHRlbnNpb25zLmluY2x1ZGVzKGMubmFtZS5zcGxpdChcIi5cIilbYy5uYW1lLnNwbGl0KFwiLlwiKS5sZW5ndGgtMV0pLEg9QXJyYXkuaXNBcnJheShoLnR5cGVzKSYmIWgudHlwZXMuaW5jbHVkZXMoYy50eXBlKTtyZXR1cm4gZnx8bXx8dnx8RHx8SH07aWYodHlwZW9mIGE9PVwib2JqZWN0XCImJmEhPT1udWxsKWZvcihsZXQgYz0wLGg9YS5sZW5ndGg7YzxoOysrYyl7Y29uc3QgZj1hLml0ZW0oYyk7aWYoIWYpe3RoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7YnJlYWt9aWYobyhmLGwpKXt0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpO2JyZWFrfX1icmVha31kZWZhdWx0OntpZih0eXBlb2Ygcy52YWxpZGF0b3IhPVwiZnVuY3Rpb25cIil7Y29uc29sZS5lcnJvcihgVmFsaWRhdG9yIGZvciBjdXN0b20gcnVsZSBmb3IgWyR7ZX1dIGZpZWxkIHNob3VsZCBiZSBhIGZ1bmN0aW9uLiBUaGlzIGZpZWxkIHdpbGwgYmUgYWx3YXlzIGludmFsaWQuYCksdGhpcy5zZXRGaWVsZEludmFsaWQoZSxzKTtyZXR1cm59Y29uc3QgbD1zLnZhbGlkYXRvcihhLHRoaXMuZmllbGRzKTtpZih0eXBlb2YgbCE9XCJib29sZWFuXCImJnR5cGVvZiBsIT1cImZ1bmN0aW9uXCImJmNvbnNvbGUuZXJyb3IoYFZhbGlkYXRvciByZXR1cm4gdmFsdWUgZm9yIFske2V9XSBmaWVsZCBzaG91bGQgYmUgYm9vbGVhbiBvciBmdW5jdGlvbi4gSXQgd2lsbCBiZSBjYXN0IHRvIGJvb2xlYW4uYCksdHlwZW9mIGw9PVwiZnVuY3Rpb25cIilpZihpKXRoaXMuZmllbGRzW2VdLmFzeW5jQ2hlY2tQZW5kaW5nPSEwO2Vsc2V7dGhpcy5maWVsZHNbZV0uYXN5bmNDaGVja1BlbmRpbmc9ITE7Y29uc3Qgbz1sKCk7aWYoIUYobykpe2NvbnNvbGUuZXJyb3IoYFZhbGlkYXRvciBmdW5jdGlvbiBmb3IgY3VzdG9tIHJ1bGUgZm9yIFske2V9XSBmaWVsZCBzaG91bGQgcmV0dXJuIGEgUHJvbWlzZS4gVGhpcyBmaWVsZCB3aWxsIGJlIGFsd2F5cyBpbnZhbGlkLmApLHRoaXMuc2V0RmllbGRJbnZhbGlkKGUscyk7cmV0dXJufXJldHVybiBvLnRoZW4oYz0+e2N8fHRoaXMuc2V0RmllbGRJbnZhbGlkKGUscyl9KS5jYXRjaCgoKT0+e3RoaXMuc2V0RmllbGRJbnZhbGlkKGUscyl9KX1sfHx0aGlzLnNldEZpZWxkSW52YWxpZChlLHMpfX19dmFsaWRhdGVGaWVsZChlLHQscz0hMSl7dmFyIHI7dC5pc1ZhbGlkPSEwO2NvbnN0IGk9W107cmV0dXJuWy4uLnQucnVsZXNdLnJldmVyc2UoKS5mb3JFYWNoKGE9Pntjb25zdCBsPXRoaXMudmFsaWRhdGVGaWVsZFJ1bGUoZSx0LmVsZW0sYSxzKTtGKGwpJiZpLnB1c2gobCl9KSx0LmlzVmFsaWQmJnRoaXMuc2V0RmllbGRWYWxpZChlLChyPXQuY29uZmlnKT09bnVsbD92b2lkIDA6ci5zdWNjZXNzTWVzc2FnZSksUHJvbWlzZS5hbGxTZXR0bGVkKGkpfXZhbGlkYXRlR3JvdXAoZSx0KXtjb25zdCBzPVtdO3JldHVyblsuLi50LnJ1bGVzXS5yZXZlcnNlKCkuZm9yRWFjaChpPT57Y29uc3Qgcj10aGlzLnZhbGlkYXRlR3JvdXBSdWxlKGUsdC50eXBlLHQuZWxlbXMsaSk7RihyKSYmcy5wdXNoKHIpfSksUHJvbWlzZS5hbGxTZXR0bGVkKHMpfWZvY3VzSW52YWxpZEZpZWxkKCl7Zm9yKGNvbnN0IGUgaW4gdGhpcy5maWVsZHMpe2NvbnN0IHQ9dGhpcy5maWVsZHNbZV07aWYoIXQuaXNWYWxpZCl7c2V0VGltZW91dCgoKT0+dC5lbGVtLmZvY3VzKCksMCk7YnJlYWt9fX1hZnRlclN1Ym1pdFZhbGlkYXRpb24oKXt0aGlzLnJlbmRlckVycm9ycygpLHRoaXMuZ2xvYmFsQ29uZmlnLmZvY3VzSW52YWxpZEZpZWxkJiZ0aGlzLmZvY3VzSW52YWxpZEZpZWxkKCl9dmFsaWRhdGUoKXtyZXR1cm4gbmV3IFByb21pc2UoZT0+e2NvbnN0IHQ9W107T2JqZWN0LmtleXModGhpcy5maWVsZHMpLmZvckVhY2gocz0+e2NvbnN0IGk9dGhpcy5maWVsZHNbc10scj10aGlzLnZhbGlkYXRlRmllbGQocyxpKTtGKHIpJiZ0LnB1c2gocil9KSxPYmplY3Qua2V5cyh0aGlzLmdyb3VwRmllbGRzKS5mb3JFYWNoKHM9Pntjb25zdCBpPXRoaXMuZ3JvdXBGaWVsZHNbc10scj10aGlzLnZhbGlkYXRlR3JvdXAocyxpKTtGKHIpJiZ0LnB1c2gocil9KSx0Lmxlbmd0aD9Qcm9taXNlLmFsbFNldHRsZWQodCkudGhlbigoKT0+e3RoaXMuYWZ0ZXJTdWJtaXRWYWxpZGF0aW9uKCksZSghMCl9KToodGhpcy5hZnRlclN1Ym1pdFZhbGlkYXRpb24oKSxlKCExKSl9KX1zZXRGb3JtKGUpe3RoaXMuZm9ybT1lLHRoaXMuZm9ybS5zZXRBdHRyaWJ1dGUoXCJub3ZhbGlkYXRlXCIsXCJub3ZhbGlkYXRlXCIpLHRoaXMucmVtb3ZlTGlzdGVuZXIoXCJzdWJtaXRcIix0aGlzLmZvcm0sdGhpcy5mb3JtU3VibWl0SGFuZGxlciksdGhpcy5hZGRMaXN0ZW5lcihcInN1Ym1pdFwiLHRoaXMuZm9ybSx0aGlzLmZvcm1TdWJtaXRIYW5kbGVyKX1hZGRMaXN0ZW5lcihlLHQscyl7dC5hZGRFdmVudExpc3RlbmVyKGUscyksdGhpcy5ldmVudExpc3RlbmVycy5wdXNoKHt0eXBlOmUsZWxlbTp0LGZ1bmM6c30pfXJlbW92ZUxpc3RlbmVyKGUsdCxzKXt0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSxzKSx0aGlzLmV2ZW50TGlzdGVuZXJzPXRoaXMuZXZlbnRMaXN0ZW5lcnMuZmlsdGVyKGk9PmkudHlwZSE9PWV8fGkuZWxlbSE9PXQpfWFkZEZpZWxkKGUsdCxzKXtpZih0eXBlb2YgZSE9XCJzdHJpbmdcIil0aHJvdyBFcnJvcihcIkZpZWxkIHNlbGVjdG9yIGlzIG5vdCB2YWxpZC4gUGxlYXNlIHNwZWNpZnkgYSBzdHJpbmcgc2VsZWN0b3IuXCIpO2NvbnN0IGk9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKTtpZighaSl0aHJvdyBFcnJvcihgRmllbGQgd2l0aCAke2V9IHNlbGVjdG9yIG5vdCBmb3VuZCEgUGxlYXNlIGNoZWNrIHRoZSBmaWVsZCBzZWxlY3Rvci5gKTtpZighQXJyYXkuaXNBcnJheSh0KXx8IXQubGVuZ3RoKXRocm93IEVycm9yKGBSdWxlcyBhcmd1bWVudCBmb3IgdGhlIGZpZWxkIFske2V9XSBzaG91bGQgYmUgYW4gYXJyYXkgYW5kIHNob3VsZCBjb250YWluIGF0IGxlYXN0IDEgZWxlbWVudC5gKTtyZXR1cm4gdC5mb3JFYWNoKHI9PntpZighKFwicnVsZVwiaW4gcnx8XCJ2YWxpZGF0b3JcImluIHJ8fFwicGx1Z2luXCJpbiByKSl0aHJvdyBFcnJvcihgUnVsZXMgYXJndW1lbnQgZm9yIHRoZSBmaWVsZCBbJHtlfV0gbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBydWxlIG9yIHZhbGlkYXRvciBwcm9wZXJ0eS5gKTtpZighci52YWxpZGF0b3ImJiFyLnBsdWdpbiYmKCFyLnJ1bGV8fCFPYmplY3QudmFsdWVzKGQpLmluY2x1ZGVzKHIucnVsZSkpKXRocm93IEVycm9yKGBSdWxlIHNob3VsZCBiZSBvbmUgb2YgdGhlc2UgdHlwZXM6ICR7T2JqZWN0LnZhbHVlcyhkKS5qb2luKFwiLCBcIil9LiBQcm92aWRlZCB2YWx1ZTogJHtyLnJ1bGV9YCl9KSx0aGlzLmZpZWxkc1tlXT17ZWxlbTppLHJ1bGVzOnQsaXNWYWxpZDp2b2lkIDAsY29uZmlnOnN9LHRoaXMuc2V0TGlzdGVuZXJzKGkpLHRoaXMuaXNTdWJtaXR0ZWQmJnRoaXMudmFsaWRhdGUoKSx0aGlzfXJlbW92ZUZpZWxkKGUpe2lmKHR5cGVvZiBlIT1cInN0cmluZ1wiKXRocm93IEVycm9yKFwiRmllbGQgc2VsZWN0b3IgaXMgbm90IHZhbGlkLiBQbGVhc2Ugc3BlY2lmeSBhIHN0cmluZyBzZWxlY3Rvci5cIik7aWYoIXRoaXMuZmllbGRzW2VdKXJldHVybiBjb25zb2xlLmVycm9yKFwiRmllbGQgbm90IGZvdW5kLiBDaGVjayB0aGUgZmllbGQgc2VsZWN0b3IuXCIpLHRoaXM7Y29uc3QgdD10aGlzLmdldExpc3RlbmVyVHlwZSh0aGlzLmZpZWxkc1tlXS5lbGVtLnR5cGUpO3JldHVybiB0aGlzLnJlbW92ZUxpc3RlbmVyKHQsdGhpcy5maWVsZHNbZV0uZWxlbSx0aGlzLmhhbmRsZXJDaGFuZ2UpLHRoaXMuY2xlYXJFcnJvcnMoKSxkZWxldGUgdGhpcy5maWVsZHNbZV0sdGhpc31yZW1vdmVHcm91cChlKXtpZih0eXBlb2YgZSE9XCJzdHJpbmdcIil0aHJvdyBFcnJvcihcIkdyb3VwIHNlbGVjdG9yIGlzIG5vdCB2YWxpZC4gUGxlYXNlIHNwZWNpZnkgYSBzdHJpbmcgc2VsZWN0b3IuXCIpO3JldHVybiB0aGlzLmdyb3VwRmllbGRzW2VdPyh0aGlzLmdyb3VwRmllbGRzW2VdLmVsZW1zLmZvckVhY2godD0+e2NvbnN0IHM9dGhpcy5nZXRMaXN0ZW5lclR5cGUodC50eXBlKTt0aGlzLnJlbW92ZUxpc3RlbmVyKHMsdCx0aGlzLmhhbmRsZXJDaGFuZ2UpfSksdGhpcy5jbGVhckVycm9ycygpLGRlbGV0ZSB0aGlzLmdyb3VwRmllbGRzW2VdLHRoaXMpOihjb25zb2xlLmVycm9yKFwiR3JvdXAgbm90IGZvdW5kLiBDaGVjayB0aGUgZ3JvdXAgc2VsZWN0b3IuXCIpLHRoaXMpfWFkZFJlcXVpcmVkR3JvdXAoZSx0LHMsaSl7aWYodHlwZW9mIGUhPVwic3RyaW5nXCIpdGhyb3cgRXJyb3IoXCJHcm91cCBzZWxlY3RvciBpcyBub3QgdmFsaWQuIFBsZWFzZSBzcGVjaWZ5IGEgc3RyaW5nIHNlbGVjdG9yLlwiKTtjb25zdCByPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSk7aWYoIXIpdGhyb3cgRXJyb3IoYEdyb3VwIHdpdGggJHtlfSBzZWxlY3RvciBub3QgZm91bmQhIFBsZWFzZSBjaGVjayB0aGUgZ3JvdXAgc2VsZWN0b3IuYCk7Y29uc3QgYT1yLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKSxsPUFycmF5LmZyb20oYSkuZXZlcnkoYz0+Yy50eXBlPT09XCJyYWRpb1wiKSxvPUFycmF5LmZyb20oYSkuZXZlcnkoYz0+Yy50eXBlPT09XCJjaGVja2JveFwiKTtpZighbCYmIW8pdGhyb3cgRXJyb3IoXCJHcm91cCBzaG91bGQgY29udGFpbiBlaXRoZXIgb3IgY2hlY2tib3hlcyBvciByYWRpbyBidXR0b25zXCIpO3JldHVybiB0aGlzLmdyb3VwRmllbGRzW2VdPXtydWxlczpbe3J1bGU6eS5SZXF1aXJlZCxlcnJvck1lc3NhZ2U6dCxzdWNjZXNzTWVzc2FnZTppfV0sZ3JvdXBFbGVtOnIsZWxlbXM6QXJyYXkuZnJvbShhKSx0eXBlOmw/XCJyYWRpb1wiOlwiY2hlY2tib3hcIixpc0RpcnR5OiExLGlzVmFsaWQ6dm9pZCAwLGNvbmZpZzpzfSxhLmZvckVhY2goYz0+e3RoaXMuc2V0TGlzdGVuZXJzKGMpfSksdGhpc31nZXRMaXN0ZW5lclR5cGUoZSl7c3dpdGNoKGUpe2Nhc2VcImNoZWNrYm94XCI6Y2FzZVwic2VsZWN0LW9uZVwiOmNhc2VcImZpbGVcIjpjYXNlXCJyYWRpb1wiOnJldHVyblwiY2hhbmdlXCI7Y2FzZVwiZGF0ZVwiOnJldHVyblwiaW5wdXRcIjtkZWZhdWx0OnJldHVyblwia2V5dXBcIn19c2V0TGlzdGVuZXJzKGUpe2NvbnN0IHQ9dGhpcy5nZXRMaXN0ZW5lclR5cGUoZS50eXBlKTt0aGlzLnJlbW92ZUxpc3RlbmVyKHQsZSx0aGlzLmhhbmRsZXJDaGFuZ2UpLHRoaXMuYWRkTGlzdGVuZXIodCxlLHRoaXMuaGFuZGxlckNoYW5nZSl9Y2xlYXJFcnJvcnMoKXt2YXIgZSx0LHMsaSxyLGE7dGhpcy5lcnJvckxhYmVscy5mb3JFYWNoKGw9PmwucmVtb3ZlKCkpLHRoaXMuc3VjY2Vzc0xhYmVscy5mb3JFYWNoKGw9PmwucmVtb3ZlKCkpO2Zvcihjb25zdCBsIGluIHRoaXMuZmllbGRzKXtjb25zdCBvPXRoaXMuZmllbGRzW2xdLGM9KChlPW8uY29uZmlnKT09bnVsbD92b2lkIDA6ZS5lcnJvckZpZWxkU3R5bGUpfHx0aGlzLmdsb2JhbENvbmZpZy5lcnJvckZpZWxkU3R5bGU7T2JqZWN0LmtleXMoYykuZm9yRWFjaChmPT57by5lbGVtLnN0eWxlW2ZdPVwiXCJ9KTtjb25zdCBoPSgodD1vLmNvbmZpZyk9PW51bGw/dm9pZCAwOnQuc3VjY2Vzc0ZpZWxkU3R5bGUpfHx0aGlzLmdsb2JhbENvbmZpZy5zdWNjZXNzRmllbGRTdHlsZXx8e307T2JqZWN0LmtleXMoaCkuZm9yRWFjaChmPT57by5lbGVtLnN0eWxlW2ZdPVwiXCJ9KSxvLmVsZW0uY2xhc3NMaXN0LnJlbW92ZSgoKHM9by5jb25maWcpPT1udWxsP3ZvaWQgMDpzLmVycm9yRmllbGRDc3NDbGFzcyl8fHRoaXMuZ2xvYmFsQ29uZmlnLmVycm9yRmllbGRDc3NDbGFzcywoKGk9by5jb25maWcpPT1udWxsP3ZvaWQgMDppLnN1Y2Nlc3NGaWVsZENzc0NsYXNzKXx8dGhpcy5nbG9iYWxDb25maWcuc3VjY2Vzc0ZpZWxkQ3NzQ2xhc3MpfWZvcihjb25zdCBsIGluIHRoaXMuZ3JvdXBGaWVsZHMpe2NvbnN0IG89dGhpcy5ncm91cEZpZWxkc1tsXSxjPSgocj1vLmNvbmZpZyk9PW51bGw/dm9pZCAwOnIuZXJyb3JGaWVsZFN0eWxlKXx8dGhpcy5nbG9iYWxDb25maWcuZXJyb3JGaWVsZFN0eWxlO09iamVjdC5rZXlzKGMpLmZvckVhY2goZj0+e28uZWxlbXMuZm9yRWFjaChtPT57dmFyIHY7bS5zdHlsZVtmXT1cIlwiLG0uY2xhc3NMaXN0LnJlbW92ZSgoKHY9by5jb25maWcpPT1udWxsP3ZvaWQgMDp2LmVycm9yRmllbGRDc3NDbGFzcyl8fHRoaXMuZ2xvYmFsQ29uZmlnLmVycm9yRmllbGRDc3NDbGFzcyl9KX0pO2NvbnN0IGg9KChhPW8uY29uZmlnKT09bnVsbD92b2lkIDA6YS5zdWNjZXNzRmllbGRTdHlsZSl8fHRoaXMuZ2xvYmFsQ29uZmlnLnN1Y2Nlc3NGaWVsZFN0eWxlfHx7fTtPYmplY3Qua2V5cyhoKS5mb3JFYWNoKGY9PntvLmVsZW1zLmZvckVhY2gobT0+e3ZhciB2O20uc3R5bGVbZl09XCJcIixtLmNsYXNzTGlzdC5yZW1vdmUoKCh2PW8uY29uZmlnKT09bnVsbD92b2lkIDA6di5zdWNjZXNzRmllbGRDc3NDbGFzcyl8fHRoaXMuZ2xvYmFsQ29uZmlnLnN1Y2Nlc3NGaWVsZENzc0NsYXNzKX0pfSl9dGhpcy50b29sdGlwcz1bXX1pc1Rvb2x0aXAoKXtyZXR1cm4hIXRoaXMuZ2xvYmFsQ29uZmlnLnRvb2x0aXB9bG9ja0Zvcm0oKXtjb25zdCBlPXRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXQsIHRleHRhcmVhLCBidXR0b24sIHNlbGVjdFwiKTtmb3IobGV0IHQ9MCxzPWUubGVuZ3RoO3Q8czsrK3QpZVt0XS5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLFwiZGlzYWJsZWRcIiksZVt0XS5zdHlsZS5wb2ludGVyRXZlbnRzPVwibm9uZVwiLGVbdF0uc3R5bGUud2Via2l0RmlsdGVyPVwiZ3JheXNjYWxlKDEwMCUpXCIsZVt0XS5zdHlsZS5maWx0ZXI9XCJncmF5c2NhbGUoMTAwJSlcIn11bmxvY2tGb3JtKCl7Y29uc3QgZT10aGlzLmZvcm0ucXVlcnlTZWxlY3RvckFsbChcImlucHV0LCB0ZXh0YXJlYSwgYnV0dG9uLCBzZWxlY3RcIik7Zm9yKGxldCB0PTAscz1lLmxlbmd0aDt0PHM7Kyt0KWVbdF0ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIiksZVt0XS5zdHlsZS5wb2ludGVyRXZlbnRzPVwiXCIsZVt0XS5zdHlsZS53ZWJraXRGaWx0ZXI9XCJcIixlW3RdLnN0eWxlLmZpbHRlcj1cIlwifXJlbmRlclRvb2x0aXAoZSx0LHMpe3ZhciBmO2NvbnN0e3RvcDppLGxlZnQ6cix3aWR0aDphLGhlaWdodDpsfT1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG89dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxjPXN8fCgoZj10aGlzLmdsb2JhbENvbmZpZy50b29sdGlwKT09bnVsbD92b2lkIDA6Zi5wb3NpdGlvbik7c3dpdGNoKGMpe2Nhc2VcImxlZnRcIjp7dC5zdHlsZS50b3A9YCR7aStsLzItby5oZWlnaHQvMn1weGAsdC5zdHlsZS5sZWZ0PWAke3Itby53aWR0aC1DfXB4YDticmVha31jYXNlXCJ0b3BcIjp7dC5zdHlsZS50b3A9YCR7aS1vLmhlaWdodC1DfXB4YCx0LnN0eWxlLmxlZnQ9YCR7cithLzItby53aWR0aC8yfXB4YDticmVha31jYXNlXCJyaWdodFwiOnt0LnN0eWxlLnRvcD1gJHtpK2wvMi1vLmhlaWdodC8yfXB4YCx0LnN0eWxlLmxlZnQ9YCR7cithK0N9cHhgO2JyZWFrfWNhc2VcImJvdHRvbVwiOnt0LnN0eWxlLnRvcD1gJHtpK2wrQ31weGAsdC5zdHlsZS5sZWZ0PWAke3IrYS8yLW8ud2lkdGgvMn1weGA7YnJlYWt9fXJldHVybiB0LmRhdGFzZXQuZGlyZWN0aW9uPWMse3JlZnJlc2g6KCk9Pnt0aGlzLnJlbmRlclRvb2x0aXAoZSx0LHMpfX19Y3JlYXRlRXJyb3JMYWJlbEVsZW0oZSx0LHMpe2NvbnN0IGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpLmlubmVySFRNTD10O2NvbnN0IHI9dGhpcy5pc1Rvb2x0aXAoKT9zPT1udWxsP3ZvaWQgMDpzLmVycm9yTGFiZWxTdHlsZToocz09bnVsbD92b2lkIDA6cy5lcnJvckxhYmVsU3R5bGUpfHx0aGlzLmdsb2JhbENvbmZpZy5lcnJvckxhYmVsU3R5bGU7cmV0dXJuIE9iamVjdC5hc3NpZ24oaS5zdHlsZSxyKSxpLmNsYXNzTGlzdC5hZGQoKHM9PW51bGw/dm9pZCAwOnMuZXJyb3JMYWJlbENzc0NsYXNzKXx8dGhpcy5nbG9iYWxDb25maWcuZXJyb3JMYWJlbENzc0NsYXNzLFwianVzdC12YWxpZGF0ZS1lcnJvci1sYWJlbFwiKSx0aGlzLmlzVG9vbHRpcCgpJiYoaS5kYXRhc2V0LnRvb2x0aXA9XCJ0cnVlXCIpLHRoaXMuZ2xvYmFsQ29uZmlnLnRlc3RpbmdNb2RlJiYoaS5kYXRhc2V0LnRlc3RJZD1gZXJyb3ItbGFiZWwtJHtlfWApLHRoaXMuZXJyb3JMYWJlbHMucHVzaChpKSxpfWNyZWF0ZVN1Y2Nlc3NMYWJlbEVsZW0oZSx0LHMpe2lmKHQ9PT12b2lkIDApcmV0dXJuIG51bGw7Y29uc3QgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2kuaW5uZXJIVE1MPXQ7Y29uc3Qgcj0ocz09bnVsbD92b2lkIDA6cy5zdWNjZXNzTGFiZWxTdHlsZSl8fHRoaXMuZ2xvYmFsQ29uZmlnLnN1Y2Nlc3NMYWJlbFN0eWxlO3JldHVybiBPYmplY3QuYXNzaWduKGkuc3R5bGUsciksaS5jbGFzc0xpc3QuYWRkKChzPT1udWxsP3ZvaWQgMDpzLnN1Y2Nlc3NMYWJlbENzc0NsYXNzKXx8dGhpcy5nbG9iYWxDb25maWcuc3VjY2Vzc0xhYmVsQ3NzQ2xhc3MsXCJqdXN0LXZhbGlkYXRlLXN1Y2Nlc3MtbGFiZWxcIiksdGhpcy5nbG9iYWxDb25maWcudGVzdGluZ01vZGUmJihpLmRhdGFzZXQudGVzdElkPWBzdWNjZXNzLWxhYmVsLSR7ZX1gKSx0aGlzLnN1Y2Nlc3NMYWJlbHMucHVzaChpKSxpfXJlbmRlckZpZWxkTGFiZWwoZSx0KXt2YXIgcyxpLHIsYSxsLG8sYztpZihlLnR5cGU9PT1cImNoZWNrYm94XCJ8fGUudHlwZT09PVwicmFkaW9cIil7Y29uc3QgaD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBsYWJlbFtmb3I9XCIke2UuZ2V0QXR0cmlidXRlKFwiaWRcIil9XCJdYCk7KChpPShzPWUucGFyZW50RWxlbWVudCk9PW51bGw/dm9pZCAwOnMudGFnTmFtZSk9PW51bGw/dm9pZCAwOmkudG9Mb3dlckNhc2UoKSk9PT1cImxhYmVsXCI/KGE9KHI9ZS5wYXJlbnRFbGVtZW50KT09bnVsbD92b2lkIDA6ci5wYXJlbnRFbGVtZW50KT09bnVsbHx8YS5hcHBlbmRDaGlsZCh0KTpoPyhsPWgucGFyZW50RWxlbWVudCk9PW51bGx8fGwuYXBwZW5kQ2hpbGQodCk6KG89ZS5wYXJlbnRFbGVtZW50KT09bnVsbHx8by5hcHBlbmRDaGlsZCh0KX1lbHNlKGM9ZS5wYXJlbnRFbGVtZW50KT09bnVsbHx8Yy5hcHBlbmRDaGlsZCh0KX1yZW5kZXJFcnJvcnMoKXt2YXIgZSx0LHMsaSxyLGE7aWYoISF0aGlzLmlzU3VibWl0dGVkKXt0aGlzLmNsZWFyRXJyb3JzKCksdGhpcy5pc1ZhbGlkPSEwO2Zvcihjb25zdCBsIGluIHRoaXMuZ3JvdXBGaWVsZHMpe2NvbnN0IG89dGhpcy5ncm91cEZpZWxkc1tsXTtpZihvLmlzVmFsaWQpe28uZWxlbXMuZm9yRWFjaChmPT57dmFyIG0sdjtPYmplY3QuYXNzaWduKGYuc3R5bGUsKChtPW8uY29uZmlnKT09bnVsbD92b2lkIDA6bS5zdWNjZXNzRmllbGRTdHlsZSl8fHRoaXMuZ2xvYmFsQ29uZmlnLnN1Y2Nlc3NGaWVsZFN0eWxlKSxmLmNsYXNzTGlzdC5hZGQoKCh2PW8uY29uZmlnKT09bnVsbD92b2lkIDA6di5zdWNjZXNzRmllbGRDc3NDbGFzcyl8fHRoaXMuZ2xvYmFsQ29uZmlnLnN1Y2Nlc3NGaWVsZENzc0NsYXNzKX0pO2NvbnN0IGg9dGhpcy5jcmVhdGVTdWNjZXNzTGFiZWxFbGVtKGwsby5zdWNjZXNzTWVzc2FnZSxvLmNvbmZpZyk7aCYmby5ncm91cEVsZW0uYXBwZW5kQ2hpbGQoaCk7Y29udGludWV9dGhpcy5pc1ZhbGlkPSExLG8uZWxlbXMuZm9yRWFjaChoPT57dmFyIGYsbTtPYmplY3QuYXNzaWduKGguc3R5bGUsKChmPW8uY29uZmlnKT09bnVsbD92b2lkIDA6Zi5lcnJvckZpZWxkU3R5bGUpfHx0aGlzLmdsb2JhbENvbmZpZy5lcnJvckZpZWxkU3R5bGUpLGguY2xhc3NMaXN0LmFkZCgoKG09by5jb25maWcpPT1udWxsP3ZvaWQgMDptLmVycm9yRmllbGRDc3NDbGFzcyl8fHRoaXMuZ2xvYmFsQ29uZmlnLmVycm9yRmllbGRDc3NDbGFzcyl9KTtjb25zdCBjPXRoaXMuY3JlYXRlRXJyb3JMYWJlbEVsZW0obCxvLmVycm9yTWVzc2FnZSxvLmNvbmZpZyk7by5ncm91cEVsZW0uYXBwZW5kQ2hpbGQoYyksdGhpcy5pc1Rvb2x0aXAoKSYmdGhpcy50b29sdGlwcy5wdXNoKHRoaXMucmVuZGVyVG9vbHRpcChvLmdyb3VwRWxlbSxjLCh0PShlPW8uY29uZmlnKT09bnVsbD92b2lkIDA6ZS50b29sdGlwKT09bnVsbD92b2lkIDA6dC5wb3NpdGlvbikpfWZvcihjb25zdCBsIGluIHRoaXMuZmllbGRzKXtjb25zdCBvPXRoaXMuZmllbGRzW2xdO2lmKG8uaXNWYWxpZCl7aWYoIW8uYXN5bmNDaGVja1BlbmRpbmcpe2NvbnN0IGg9dGhpcy5jcmVhdGVTdWNjZXNzTGFiZWxFbGVtKGwsby5zdWNjZXNzTWVzc2FnZSxvLmNvbmZpZyk7aCYmdGhpcy5yZW5kZXJGaWVsZExhYmVsKG8uZWxlbSxoKSxvLmVsZW0uY2xhc3NMaXN0LmFkZCgoKHM9by5jb25maWcpPT1udWxsP3ZvaWQgMDpzLnN1Y2Nlc3NGaWVsZENzc0NsYXNzKXx8dGhpcy5nbG9iYWxDb25maWcuc3VjY2Vzc0ZpZWxkQ3NzQ2xhc3MpfWNvbnRpbnVlfXRoaXMuaXNWYWxpZD0hMSxvLmVsZW0uY2xhc3NMaXN0LmFkZCgoKGk9by5jb25maWcpPT1udWxsP3ZvaWQgMDppLmVycm9yRmllbGRDc3NDbGFzcyl8fHRoaXMuZ2xvYmFsQ29uZmlnLmVycm9yRmllbGRDc3NDbGFzcyk7Y29uc3QgYz10aGlzLmNyZWF0ZUVycm9yTGFiZWxFbGVtKGwsby5lcnJvck1lc3NhZ2Usby5jb25maWcpO3RoaXMucmVuZGVyRmllbGRMYWJlbChvLmVsZW0sYyksdGhpcy5pc1Rvb2x0aXAoKSYmdGhpcy50b29sdGlwcy5wdXNoKHRoaXMucmVuZGVyVG9vbHRpcChvLmVsZW0sYywoYT0ocj1vLmNvbmZpZyk9PW51bGw/dm9pZCAwOnIudG9vbHRpcCk9PW51bGw/dm9pZCAwOmEucG9zaXRpb24pKX19fWRlc3Ryb3koKXt0aGlzLmV2ZW50TGlzdGVuZXJzLmZvckVhY2goZT0+e3RoaXMucmVtb3ZlTGlzdGVuZXIoZS50eXBlLGUuZWxlbSxlLmZ1bmMpfSksT2JqZWN0LmtleXModGhpcy5jdXN0b21TdHlsZVRhZ3MpLmZvckVhY2goZT0+e3RoaXMuY3VzdG9tU3R5bGVUYWdzW2VdLnJlbW92ZSgpfSksdGhpcy5jbGVhckVycm9ycygpLHRoaXMuZ2xvYmFsQ29uZmlnLmxvY2tGb3JtJiZ0aGlzLnVubG9ja0Zvcm0oKX1yZWZyZXNoKCl7dGhpcy5kZXN0cm95KCksdGhpcy5mb3JtPyh0aGlzLmluaXRpYWxpemUodGhpcy5mb3JtLHRoaXMuZ2xvYmFsQ29uZmlnKSxPYmplY3Qua2V5cyh0aGlzLmZpZWxkcykuZm9yRWFjaChlPT57dGhpcy5hZGRGaWVsZChlLFsuLi50aGlzLmZpZWxkc1tlXS5ydWxlc10sdGhpcy5maWVsZHNbZV0uY29uZmlnKX0pKTpjb25zb2xlLmVycm9yKFwiQ2Fubm90IGluaXRpYWxpemUgdGhlIGxpYnJhcnkhIEZvcm0gaXMgbm90IGRlZmluZWRcIil9c2V0Q3VycmVudExvY2FsZShlKXtpZih0eXBlb2YgZSE9XCJzdHJpbmdcIiYmZSE9PXZvaWQgMCl7Y29uc29sZS5lcnJvcihcIkN1cnJlbnQgbG9jYWxlIHNob3VsZCBiZSBhIHN0cmluZ1wiKTtyZXR1cm59dGhpcy5jdXJyZW50TG9jYWxlPWUsdGhpcy5pc1N1Ym1pdHRlZCYmdGhpcy52YWxpZGF0ZSgpfW9uU3VjY2VzcyhlKXtyZXR1cm4gdGhpcy5vblN1Y2Nlc3NDYWxsYmFjaz1lLHRoaXN9b25GYWlsKGUpe3JldHVybiB0aGlzLm9uRmFpbENhbGxiYWNrPWUsdGhpc319cmV0dXJuIE99KTtcbiJdLCJmaWxlIjoianVzdC12YWxpZGF0ZS5taW4uanMifQ==